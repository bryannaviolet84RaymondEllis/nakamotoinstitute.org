[
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6722#msg6722",
        "date": "July 30, 2010, 09:23:10 PM",
        "content": "<div class=\"post\">This patch will calculate four hashes on one core using vector instructions. There's a test programm included that validates the new hash function against the old one so it should be correct.<br/><br/>The patch is against 0.3.6. Improves khash/s by roughly 115%.<br/><br/><a href=\"http://pastebin.com/XN1JDb53\">http://pastebin.com/XN1JDb53</a></div>",
        "post_num": 1,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "knightmb",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=345",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6725#msg6725",
        "date": "July 30, 2010, 09:33:29 PM",
        "content": "<div class=\"post\">I take it that you've already tested the hash limit before performance starts to suffer against the stock code? I'm just curious myself.</div>",
        "post_num": 2,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6730#msg6730",
        "date": "July 30, 2010, 09:47:22 PM",
        "content": "<div class=\"post\">Performance of stock code (as measured by my test/benchmark program) is about 1500khash/s.<br/>My code does 3500khash/s. Both figures are for one core. It scales well because I do 128 hashes at once and keep the datastructures small enough to fit in the CPU cache.<br/><br/>I have two local collision attacks which will squeeze another 300khash/s out, but they are not stable yet.</div>",
        "post_num": 3,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "knightmb",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=345",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6732#msg6732",
        "date": "July 30, 2010, 09:51:10 PM",
        "content": "<div class=\"post\">Awesome, I'll have to give it a try myself then.\u00a0 <img alt=\"Shocked\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/shocked.gif\"/></div>",
        "post_num": 4,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6736#msg6736",
        "date": "July 30, 2010, 10:00:24 PM",
        "content": "<div class=\"post\">Tell me if it works <img alt=\"Smiley\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/smiley.gif\"/><br/>Donations are welcome. 17asVKkzRGTFvvGH9dMGQaHe78xzfvgSSA </div>",
        "post_num": 5,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6751#msg6751",
        "date": "July 31, 2010, 12:29:20 AM",
        "content": "<div class=\"post\">That's amazing... <br/><br/>So are you saying you use 128-bit registers to SIMD four 32-bit data at once?\u00a0 I've wondered about that for a long time, but I didn't think it would be possible due to addition carrying into the neighbour's value.</div>",
        "post_num": 6,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "knightmb",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=345",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6777#msg6777",
        "date": "July 31, 2010, 04:49:33 AM",
        "content": "<div class=\"post\">Darn, it means the next release, the difficulty is going to have to increase to 1000 or so to keep up, LOL\u00a0 <img alt=\"Grin\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/grin.gif\"/></div>",
        "post_num": 7,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6797#msg6797",
        "date": "July 31, 2010, 10:12:38 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6751#msg6751\">Quote from: satoshi on July 31, 2010, 12:29:20 AM</a></div><div class=\"quote\">That's amazing... <br/><br/>So are you saying you use 128-bit registers to SIMD four 32-bit data at once?\u00a0 I've wondered about that for a long time, but I didn't think it would be possible due to addition carrying into the neighbour's value.<br/></div>That's how it works. Four 32 bit values in a 128 bit vector. They're calculated independently, but at the same time.<br/><br/>Btw. Why are you using this alignup&lt;16&gt; function when __attribute__ ((aligned (16))) will tell the compiler to align at compiletime?</div>",
        "post_num": 8,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "em3rgentOrdr",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=535",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6810#msg6810",
        "date": "July 31, 2010, 01:42:48 PM",
        "content": "<div class=\"post\">hmm...I wasn't able to apply the patch (I'm a noobie). Here's the command I ran from bitcoin-0.3.6/src # patch &lt; XN1JDb53.txt <br/><br/>Output:<br/><br/>1 out of 1 hunk ignored<br/>(Stripping trailing CRs from patch.)<br/>patching file main.cpp<br/>Hunk #1 FAILED at 2555.<br/>Hunk #2 FAILED at 2701.<br/>2 out of 2 hunks FAILED<br/>(Stripping trailing CRs from patch.)<br/>patching file makefile.unix<br/>Hunk #1 FAILED at 45.<br/>Hunk #2 FAILED at 58.<br/><br/>What's the proper command to type into linux?\u00a0 Or do you have linux binaries?<br/></div>",
        "post_num": 9,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6817#msg6817",
        "date": "July 31, 2010, 02:18:03 PM",
        "content": "<div class=\"post\">the mean client would send all generated bitcoins to a certain address <img alt=\"Wink\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/wink.gif\"/><br/><br/>@em3rgent0rder: i don't know why it fails, but it should be easy to patch it manually...</div>",
        "post_num": 10,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "jgarzik",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=541",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6830#msg6830",
        "date": "July 31, 2010, 05:18:30 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6810#msg6810\">Quote from: em3rgentOrdr on July 31, 2010, 01:42:48 PM</a></div><div class=\"quote\">hmm...I wasn't able to apply the patch (I'm a noobie). Here's the command I ran from bitcoin-0.3.6/src # patch &lt; XN1JDb53.txt <br/><br/>Output:<br/><br/>1 out of 1 hunk ignored<br/>(Stripping trailing CRs from patch.)<br/>patching file main.cpp<br/>Hunk #1 FAILED at 2555.<br/>Hunk #2 FAILED at 2701.<br/>2 out of 2 hunks FAILED<br/>(Stripping trailing CRs from patch.)<br/>patching file makefile.unix<br/>Hunk #1 FAILED at 45.<br/>Hunk #2 FAILED at 58.<br/></div><br/>It definitely does not apply to the SVN trunk.\u00a0 Maybe tcatm could post the main.cpp itself?<br/></div>",
        "post_num": 11,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6831#msg6831",
        "date": "July 31, 2010, 05:40:27 PM",
        "content": "<div class=\"post\">Looks like pastebin.com messes up the patch...<br/><div class=\"codeheader\">Code:</div><div class=\"code\">diff --git a/cryptopp/sha256.cpp b/cryptopp/sha256.cpp<br/>new file mode 100644<br/>index 0000000..15f8be1<br/>--- /dev/null<br/>+++ b/cryptopp/sha256.cpp<br/>@@ -0,0 +1,443 @@<br/>+#include &lt;string.h&gt;<br/>+#include &lt;assert.h&gt;<br/>+<br/>+#include &lt;xmmintrin.h&gt;<br/>+#include &lt;stdint.h&gt;<br/>+#include &lt;stdio.h&gt;<br/>+<br/>+#define NPAR 32<br/>+<br/>+static const unsigned int sha256_consts[] = {<br/>+<span style=\"white-space: pre;\"> </span>0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, /*\u00a0 0 */<br/>+<span style=\"white-space: pre;\"> </span>0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,<br/>+<span style=\"white-space: pre;\"> </span>0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, /*\u00a0 8 */<br/>+<span style=\"white-space: pre;\"> </span>0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,<br/>+<span style=\"white-space: pre;\"> </span>0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, /* 16 */<br/>+<span style=\"white-space: pre;\"> </span>0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,<br/>+<span style=\"white-space: pre;\"> </span>0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, /* 24 */<br/>+<span style=\"white-space: pre;\"> </span>0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,<br/>+<span style=\"white-space: pre;\"> </span>0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, /* 32 */<br/>+<span style=\"white-space: pre;\"> </span>0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,<br/>+<span style=\"white-space: pre;\"> </span>0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, /* 40 */<br/>+<span style=\"white-space: pre;\"> </span>0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,<br/>+<span style=\"white-space: pre;\"> </span>0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, /* 48 */<br/>+<span style=\"white-space: pre;\"> </span>0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,<br/>+<span style=\"white-space: pre;\"> </span>0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, /* 56 */<br/>+<span style=\"white-space: pre;\"> </span>0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2<br/>+};<br/>+<br/>+<br/>+static inline __m128i Ch(const __m128i b, const __m128i c, const __m128i d) {<br/>+<span style=\"white-space: pre;\"> </span>return (b &amp; c) ^ (~b &amp; d);<br/>+}<br/>+<br/>+static inline __m128i Maj(const __m128i b, const __m128i c, const __m128i d) {<br/>+<span style=\"white-space: pre;\"> </span>return (b &amp; c) ^ (b &amp; d) ^ (c &amp; d);<br/>+}<br/>+<br/>+static inline __m128i ROTR(__m128i x, const int n) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_srli_epi32(x, n) | _mm_slli_epi32(x, 32 - n);<br/>+}<br/>+<br/>+static inline __m128i SHR(__m128i x, const int n) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_srli_epi32(x, n);<br/>+}<br/>+<br/>+/* SHA256 Functions */<br/>+#define<span style=\"white-space: pre;\"> </span>BIGSIGMA0_256(x)<span style=\"white-space: pre;\"> </span>(ROTR((x), 2) ^ ROTR((x), 13) ^ ROTR((x), 22))<br/>+#define<span style=\"white-space: pre;\"> </span>BIGSIGMA1_256(x)<span style=\"white-space: pre;\"> </span>(ROTR((x), 6) ^ ROTR((x), 11) ^ ROTR((x), 25))<br/>+#define<span style=\"white-space: pre;\"> </span>SIGMA0_256(x)<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>(ROTR((x), 7) ^ ROTR((x), 18) ^ SHR((x), 3))<br/>+#define<span style=\"white-space: pre;\"> </span>SIGMA1_256(x)<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>(ROTR((x), 17) ^ ROTR((x), 19) ^ SHR((x), 10))<br/>+<br/>+static inline __m128i load_epi32(const unsigned int x0, const unsigned int x1, const unsigned int x2, const unsigned int x3) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_set_epi32(x0, x1, x2, x3);<br/>+}<br/>+<br/>+static inline unsigned int store32(const __m128i x, int i) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x;<br/>+<span style=\"white-space: pre;\"> </span>return box.ret[i];<br/>+}<br/>+<br/>+static inline void store_epi32(const __m128i x, unsigned int *x0, unsigned int *x1, unsigned int *x2, unsigned int *x3) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x;<br/>+<span style=\"white-space: pre;\"> </span>*x0 = box.ret[3]; *x1 = box.ret[2]; *x2 = box.ret[1]; *x3 = box.ret[0];<br/>+}<br/>+<br/>+static inline __m128i SHA256_CONST(const int i) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_set1_epi32(sha256_consts[i]);<br/>+}<br/>+<br/>+#define add4(x0, x1, x2, x3) _mm_add_epi32(_mm_add_epi32(_mm_add_epi32(x0, x1), x2), x3)<br/>+#define add5(x0, x1, x2, x3, x4) _mm_add_epi32(add4(x0, x1, x2, x3), x4)<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+d = _mm_add_epi32(d, T1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+h = _mm_add_epi32(T1, T2);<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND_lastd(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+d = _mm_add_epi32(d, T1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>+//T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>+//h = _mm_add_epi32(T1, T2);<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND_last(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+h = _mm_add_epi32(T1, T2);<br/>+<br/>+static inline unsigned int swap(unsigned int value) {<br/>+<span style=\"white-space: pre;\"> </span>__asm__ (\"bswap %0\" : \"=r\" (value) : \"0\" (value));<br/>+<span style=\"white-space: pre;\"> </span>return value;<br/>+}<br/>+<br/>+static inline unsigned int SWAP32(const void *addr) {<br/>+<span style=\"white-space: pre;\"> </span>unsigned int value = (*((unsigned int *)(addr)));<br/>+<span style=\"white-space: pre;\"> </span>__asm__ (\"bswap %0\" : \"=r\" (value) : \"0\" (value));<br/>+<span style=\"white-space: pre;\"> </span>return value;<br/>+}<br/>+<br/>+static inline void dumpreg(__m128i x, char *msg) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x ;<br/>+<span style=\"white-space: pre;\"> </span>printf(\"%s %08x %08x %08x %08x\\n\", msg, box.ret[0], box.ret[1], box.ret[2], box.ret[3]);<br/>+}<br/>+<br/>+#if 1<br/>+#define dumpstate(i) printf(\"%s: %08x %08x %08x %08x %08x %08x %08x %08x %08x\\n\", \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>__func__, store32(w0, i), store32(a, i), store32(b, i), store32(c, i), store32(d, i), store32(e, i), store32(f, i), store32(g, i), store32(h, i));<br/>+#else<br/>+#define dumpstate()<br/>+#endif<br/>+void Double_BlockSHA256(const void* pin, void* pad, const void *pre, unsigned int thash[8][NPAR], const void *init)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* In = (unsigned int*)pin;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* Pad = (unsigned int*)pad;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* hPre = (unsigned int*)pre;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* hInit = (unsigned int*)init;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int i, j, k;<br/>+<br/>+<span style=\"white-space: pre;\"> </span>/* vectors used in calculation */<br/>+<span style=\"white-space: pre;\"> </span>__m128i w0, w1, w2, w3, w4, w5, w6, w7;<br/>+<span style=\"white-space: pre;\"> </span>__m128i w8, w9, w10, w11, w12, w13, w14, w15;<br/>+<span style=\"white-space: pre;\"> </span>__m128i T1, T2;<br/>+<span style=\"white-space: pre;\"> </span>__m128i a, b, c, d, e, f, g, h;<br/>+<br/>+<span style=\"white-space: pre;\"> </span>/* nonce offset for vector */<br/>+<span style=\"white-space: pre;\"> </span>__m128i offset = load_epi32(0x00000003, 0x00000002, 0x00000001, 0x00000000);<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span>for(k = 0; k&lt;NPAR; k+=4) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = load_epi32(In[0], In[0], In[0], In[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = load_epi32(In[1], In[1], In[1], In[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = load_epi32(In[2], In[2], In[2], In[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = load_epi32(In[3], In[3], In[3], In[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = load_epi32(In[4], In[4], In[4], In[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = load_epi32(In[5], In[5], In[5], In[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = load_epi32(In[6], In[6], In[6], In[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = load_epi32(In[7], In[7], In[7], In[7]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32(In[8], In[8], In[8], In[8]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = load_epi32(In[9], In[9], In[9], In[9]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = load_epi32(In[10], In[10], In[10], In[10]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = load_epi32(In[11], In[11], In[11], In[11]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = load_epi32(In[12], In[12], In[12], In[12]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = load_epi32(In[13], In[13], In[13], In[13]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = load_epi32(In[14], In[14], In[14], In[14]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = load_epi32(In[15], In[15], In[15], In[15]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* hack nonce into lowest byte of w3 */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>__m128i k_vec = load_epi32(k, k, k, k);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = _mm_add_epi32(w3, offset);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = _mm_add_epi32(w3, k_vec);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>a = load_epi32(hPre[0], hPre[0], hPre[0], hPre[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>b = load_epi32(hPre[1], hPre[1], hPre[1], hPre[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>c = load_epi32(hPre[2], hPre[2], hPre[2], hPre[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>d = load_epi32(hPre[3], hPre[3], hPre[3], hPre[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>e = load_epi32(hPre[4], hPre[4], hPre[4], hPre[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>f = load_epi32(hPre[5], hPre[5], hPre[5], hPre[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>g = load_epi32(hPre[6], hPre[6], hPre[6], hPre[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>h = load_epi32(hPre[7], hPre[7], hPre[7], hPre[7]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\u00a0 \u00a0 <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);<br/>+<br/>+#define store_load(x, i, dest) \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32((hPre)[i], (hPre)[i], (hPre)[i], (hPre)[i]); \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>dest = _mm_add_epi32(w8, x);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(a, 0, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(b, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(c, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(d, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(e, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(f, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(g, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(h, 7, w7);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32(Pad[8], Pad[8], Pad[8], Pad[8]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = load_epi32(Pad[9], Pad[9], Pad[9], Pad[9]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = load_epi32(Pad[10], Pad[10], Pad[10], Pad[10]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = load_epi32(Pad[11], Pad[11], Pad[11], Pad[11]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = load_epi32(Pad[12], Pad[12], Pad[12], Pad[12]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = load_epi32(Pad[13], Pad[13], Pad[13], Pad[13]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = load_epi32(Pad[14], Pad[14], Pad[14], Pad[14]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = load_epi32(Pad[15], Pad[15], Pad[15], Pad[15]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>a = load_epi32(hInit[0], hInit[0], hInit[0], hInit[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>b = load_epi32(hInit[1], hInit[1], hInit[1], hInit[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>c = load_epi32(hInit[2], hInit[2], hInit[2], hInit[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>d = load_epi32(hInit[3], hInit[3], hInit[3], hInit[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>e = load_epi32(hInit[4], hInit[4], hInit[4], hInit[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>f = load_epi32(hInit[5], hInit[5], hInit[5], hInit[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>g = load_epi32(hInit[6], hInit[6], hInit[6], hInit[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>h = load_epi32(hInit[7], hInit[7], hInit[7], hInit[7]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\u00a0 \u00a0 <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* store resulsts directly in thash */<br/>+#define store_2(x,i)\u00a0 \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = load_epi32((hInit)[i], (hInit)[i], (hInit)[i], (hInit)[i]); \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>*(__m128i *)&amp;(thash)[i][0+k] = _mm_add_epi32(w0, x); <br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(a, 0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(b, 1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(c, 2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(d, 3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(e, 4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(f, 5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(g, 6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(h, 7);<br/>+<span style=\"white-space: pre;\"> </span>}<br/>+<br/>+}<br/>diff --git a/main.cpp b/main.cpp<br/>index ddc359a..d30d642 100755<br/>--- a/main.cpp<br/>+++ b/main.cpp<br/>@@ -2555,8 +2555,10 @@ inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)<br/>\u00a0 \u00a0 \u00a0CryptoPP::SHA256::Transform((CryptoPP::word32*)pstate, (CryptoPP::word32*)pinput);<br/>\u00a0}<br/>\u00a0<br/>+// !!!! NPAR must match NPAR in cryptopp/sha256.cpp !!!!<br/>+#define NPAR 32<br/>\u00a0<br/>-<br/>+extern void Double_BlockSHA256(const void* pin, void* pout, const void *pinit, unsigned int hash[8][NPAR], const void *init2);<br/>\u00a0<br/>\u00a0<br/>\u00a0void BitcoinMiner()<br/>@@ -2701,108 +2703,123 @@ void BitcoinMiner()<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256 hashTarget = CBigNum().SetCompact(pblock-&gt;nBits).getuint256();<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256 hashbuf[2];<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256&amp; hash = *alignup&lt;16&gt;(hashbuf);<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 // Cache for NPAR hashes<br/>+\u00a0 \u00a0 \u00a0 \u00a0 unsigned int thash[8][NPAR];<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 unsigned int j;<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0loop<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SHA256Transform(&amp;tmp.hash1, (char*)&amp;tmp.block + 64, &amp;midstate);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SHA256Transform(&amp;hash, &amp;tmp.hash1, pSHA256InitState);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Double_BlockSHA256((char*)&amp;tmp.block + 64, &amp;tmp.hash1, &amp;midstate, thash, pSHA256InitState);<br/>\u00a0<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (((unsigned short*)&amp;hash)[14] == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(j = 0; j&lt;NPAR; j++) {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (thash[7][j] == 0)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Byte swap the result after preliminary check<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; sizeof(hash)/4; i++)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((unsigned int*)&amp;hash)[i] = ByteReverse(((unsigned int*)&amp;hash)[i]);<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (hash &lt;= hashTarget)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Byte swap the result after preliminary check<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; sizeof(hash)/4; i++)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((unsigned int*)&amp;hash)[i] = ByteReverse((unsigned int)thash[i][j]);<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (hash &lt;= hashTarget)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Double_BlocSHA256 might only calculate parts of the hash.<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // We'll insert the nonce and get the real hash.<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //pblock-&gt;nNonce = ByteReverse(tmp.block.nNonce + j);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //hash = pblock-&gt;GetHash();<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nNonce = ByteReverse(tmp.block.nNonce + j);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert(hash == pblock-&gt;GetHash());<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //// debug print<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"BitcoinMiner:\\n\");<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"proof-of-work found\u00a0 \\n\u00a0 hash: %s\u00a0 \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;print();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"generated %s\\n\", FormatMoney(pblock-&gt;vtx[0].vout[0].nValue).c_str());<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_NORMAL);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_main)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nNonce = ByteReverse(tmp.block.nNonce);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert(hash == pblock-&gt;GetHash());<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //// debug print<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"BitcoinMiner:\\n\");<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"proof-of-work found\u00a0 \\n\u00a0 hash: %s\u00a0 \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;print();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"generated %s\\n\", FormatMoney(pblock-&gt;vtx[0].vout[0].nValue).c_str());<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_NORMAL);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_main)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev == pindexBest)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Save key<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!AddKey(key))<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key.MakeNewKey();<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Track how many getdata requests this block gets<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_mapRequestCount)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mapRequestCount[pblock-&gt;GetHash()] = 0;<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Process this block the same as if we had received it from another node<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!ProcessBlock(NULL, pblock.release()))<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"ERROR in BitcoinMiner, ProcessBlock, block not accepted\\n\");<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_LOWEST);<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Sleep(500);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev == pindexBest)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Save key<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!AddKey(key))<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key.MakeNewKey();<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Track how many getdata requests this block gets<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_mapRequestCount)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mapRequestCount[pblock-&gt;GetHash()] = 0;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Process this block the same as if we had received it from another node<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!ProcessBlock(NULL, pblock.release()))<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"ERROR in BitcoinMiner, ProcessBlock, block not accepted\\n\");<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_LOWEST);<br/>\u00a0<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nTime every few seconds<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const unsigned int nMask = 0xffff;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ((++tmp.block.nNonce &amp; nMask) == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Sleep(500);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nonce<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nNonce += NPAR;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nTime every few seconds<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const unsigned int nMask = 0xffff;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ((tmp.block.nNonce &amp; nMask) == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meter hashes/sec<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nTimerStart;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int nHashCounter;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTimerStart == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter++;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meter hashes/sec<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nTimerStart;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int nHashCounter;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTimerStart == 0)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter++;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static CCriticalSection cs;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static CCriticalSection cs;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double dHashesPerSec = 1000.0 * (nMask+1) * nHashCounter / (GetTimeMillis() - nTimerStart);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter = 0;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string strStatus = strprintf(\"\u00a0 \u00a0 %.0f khash/s\", dHashesPerSec/1000.0);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIThreadCall(bind(CalledSetStatusBar, strStatus, 0));<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nLogTime;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTime() - nLogTime &gt; 30 * 60)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nLogTime = GetTime();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double dHashesPerSec = 1000.0 * (nMask+1) * nHashCounter / (GetTimeMillis() - nTimerStart);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter = 0;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string strStatus = strprintf(\"\u00a0 \u00a0 %.0f khash/s\", dHashesPerSec/1000.0);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIThreadCall(bind(CalledSetStatusBar, strStatus, 0));<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nLogTime;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTime() - nLogTime &gt; 30 * 60)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nLogTime = GetTime();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Check for stop or if block needs to be rebuilt<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fShutdown)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!fGenerateBitcoins)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fLimitProcessors &amp;&amp; vnThreadsRunning[3] &gt; nLimitProcessors)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (vNodes.empty())<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (tmp.block.nNonce == 0)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTransactionsUpdated != nTransactionsUpdatedLast &amp;&amp; GetTime() - nStart &gt; 60)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev != pindexBest)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nTime = max(pindexPrev-&gt;GetMedianTimePast()+1, GetAdjustedTime());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nTime = ByteReverse(pblock-&gt;nTime);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Check for stop or if block needs to be rebuilt<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fShutdown)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!fGenerateBitcoins)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fLimitProcessors &amp;&amp; vnThreadsRunning[3] &gt; nLimitProcessors)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (vNodes.empty())<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (tmp.block.nNonce == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTransactionsUpdated != nTransactionsUpdatedLast &amp;&amp; GetTime() - nStart &gt; 60)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev != pindexBest)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nTime = max(pindexPrev-&gt;GetMedianTimePast()+1, GetAdjustedTime());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nTime = ByteReverse(pblock-&gt;nTime);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>\u00a0 \u00a0 \u00a0}<br/>\u00a0}<br/>diff --git a/makefile.unix b/makefile.unix<br/>index 597a0ea..8fb0aa6 100755<br/>--- a/makefile.unix<br/>+++ b/makefile.unix<br/>@@ -45,7 +45,8 @@ OBJS= \\<br/>\u00a0 \u00a0 \u00a0obj/rpc.o \\<br/>\u00a0 \u00a0 \u00a0obj/init.o \\<br/>\u00a0 \u00a0 \u00a0cryptopp/obj/sha.o \\<br/>-\u00a0 \u00a0 cryptopp/obj/cpu.o<br/>+\u00a0 \u00a0 cryptopp/obj/cpu.o \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>cryptopp/obj/sha256.o<br/>\u00a0<br/>\u00a0<br/>\u00a0all: bitcoin<br/>@@ -58,18 +59,20 @@ obj/%.o: %.cpp $(HEADERS) headers.h.gch<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -DGUI -o $@ $&lt;<br/>\u00a0<br/>\u00a0cryptopp/obj/%.o: cryptopp/%.cpp<br/>-<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -O3 -DCRYPTOPP_DISABLE_SSE2 -o $@ $&lt;<br/>+<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -frename-registers -funroll-all-loops -fomit-frame-pointer\u00a0 -march=native -msse2 -msse3\u00a0 -ffast-math -O3 -o $@ $&lt;<br/>\u00a0<br/>\u00a0bitcoin: $(OBJS) obj/ui.o obj/uibase.o<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ $(CFLAGS) -o $@ $(LIBPATHS) $^ $(WXLIBS) $(LIBS)<br/>\u00a0<br/>-<br/>\u00a0obj/nogui/%.o: %.cpp $(HEADERS)<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -o $@ $&lt;<br/>\u00a0<br/>\u00a0bitcoind: $(OBJS:obj/%=obj/nogui/%)<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)<br/>\u00a0<br/>+test: cryptopp/obj/sha.o cryptopp/obj/sha256.o test.cpp<br/>+<span style=\"white-space: pre;\"> </span>\u00a0 g++ $(CFLAGS) -o $@ $(LIBPATHS) $^ $(WXLIBS) $(LIBS)<br/>+<br/>\u00a0<br/>\u00a0clean:<br/>\u00a0<span style=\"white-space: pre;\"> </span>-rm -f obj/*.o<br/>diff --git a/test.cpp b/test.cpp<br/>new file mode 100755<br/>index 0000000..7cab332<br/>--- /dev/null<br/>+++ b/test.cpp<br/>@@ -0,0 +1,237 @@<br/>+// Copyright (c) 2009-2010 Satoshi Nakamoto<br/>+// Distributed under the MIT/X11 software license, see the accompanying<br/>+// file license.txt or http://www.opensource.org/licenses/mit-license.php.<br/>+#include &lt;assert.h&gt;<br/>+#include &lt;openssl/ecdsa.h&gt;<br/>+#include &lt;openssl/evp.h&gt;<br/>+#include &lt;openssl/rand.h&gt;<br/>+#include &lt;openssl/sha.h&gt;<br/>+#include &lt;openssl/ripemd.h&gt;<br/>+#include &lt;db_cxx.h&gt;<br/>+#include &lt;stdio.h&gt;<br/>+#include &lt;stdlib.h&gt;<br/>+#include &lt;math.h&gt;<br/>+#include &lt;limits.h&gt;<br/>+#include &lt;float.h&gt;<br/>+#include &lt;assert.h&gt;<br/>+#include &lt;memory&gt;<br/>+#include &lt;iostream&gt;<br/>+#include &lt;sstream&gt;<br/>+#include &lt;string&gt;<br/>+#include &lt;vector&gt;<br/>+#include &lt;list&gt;<br/>+#include &lt;deque&gt;<br/>+#include &lt;map&gt;<br/>+#include &lt;set&gt;<br/>+#include &lt;algorithm&gt;<br/>+#include &lt;numeric&gt;<br/>+#include &lt;boost/foreach.hpp&gt;<br/>+#include &lt;boost/lexical_cast.hpp&gt;<br/>+#include &lt;boost/tuple/tuple.hpp&gt;<br/>+#include &lt;boost/fusion/container/vector.hpp&gt;<br/>+#include &lt;boost/tuple/tuple_comparison.hpp&gt;<br/>+#include &lt;boost/tuple/tuple_io.hpp&gt;<br/>+#include &lt;boost/array.hpp&gt;<br/>+#include &lt;boost/bind.hpp&gt;<br/>+#include &lt;boost/function.hpp&gt;<br/>+#include &lt;boost/filesystem.hpp&gt;<br/>+#include &lt;boost/filesystem/fstream.hpp&gt;<br/>+#include &lt;boost/algorithm/string.hpp&gt;<br/>+#include &lt;boost/interprocess/sync/interprocess_mutex.hpp&gt;<br/>+#include &lt;boost/interprocess/sync/interprocess_recursive_mutex.hpp&gt;<br/>+#include &lt;boost/date_time/gregorian/gregorian_types.hpp&gt;<br/>+#include &lt;boost/date_time/posix_time/posix_time_types.hpp&gt;<br/>+#include &lt;sys/resource.h&gt;<br/>+#include &lt;sys/time.h&gt;<br/>+using namespace std;<br/>+using namespace boost;<br/>+#include \"cryptopp/sha.h\"<br/>+#include \"strlcpy.h\"<br/>+#include \"serialize.h\"<br/>+#include \"uint256.h\"<br/>+#include \"bignum.h\"<br/>+<br/>+#undef printf<br/>+<span style=\"white-space: pre;\"> </span>template &lt;size_t nBytes, typename T&gt;<br/>+T* alignup(T* p)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>union<br/>+<span style=\"white-space: pre;\"> </span>{\u00a0 \u00a0<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>T* ptr;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>size_t n;<br/>+<span style=\"white-space: pre;\"> </span>} u;<br/>+<span style=\"white-space: pre;\"> </span>u.ptr = p;<br/>+<span style=\"white-space: pre;\"> </span>u.n = (u.n + (nBytes-1)) &amp; ~(nBytes-1);<br/>+<span style=\"white-space: pre;\"> </span>return u.ptr;<br/>+}<br/>+<br/>+int FormatHashBlocks(void* pbuffer, unsigned int len) <br/>+{<br/>+<span style=\"white-space: pre;\"> </span>unsigned char* pdata = (unsigned char*)pbuffer;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int blocks = 1 + ((len + 8) / 64); <br/>+<span style=\"white-space: pre;\"> </span>unsigned char* pend = pdata + 64 * blocks;<br/>+<span style=\"white-space: pre;\"> </span>memset(pdata + len, 0, 64 * blocks - len);<br/>+<span style=\"white-space: pre;\"> </span>pdata[len] = 0x80;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int bits = len * 8; <br/>+<span style=\"white-space: pre;\"> </span>pend[-1] = (bits &gt;&gt; 0) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-2] = (bits &gt;&gt; 8) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-3] = (bits &gt;&gt; 16) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-4] = (bits &gt;&gt; 24) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>return blocks;<br/>+}<br/>+<br/>+using CryptoPP::ByteReverse;<br/>+static int detectlittleendian = 1;<br/>+<br/>+#define NPAR 32 <br/>+<br/>+extern void Double_BlockSHA256(const void* pin, void* pout, const void *pinit, unsigned int hash[8][NPAR], const void *init2);<br/>+<br/>+using CryptoPP::ByteReverse;<br/>+<br/>+static const unsigned int pSHA256InitState[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};<br/>+<br/>+inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>memcpy(pstate, pinit, 32); <br/>+<span style=\"white-space: pre;\"> </span>CryptoPP::SHA256::Transform((CryptoPP::word32*)pstate, (CryptoPP::word32*)pinput);<br/>+}<br/>+<br/>+void BitcoinTester(char *filename)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>printf(\"SHA256 test started\\n\");<br/>+<br/>+<span style=\"white-space: pre;\"> </span>struct tmpworkspace<br/>+<span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>struct unnamed2<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>int nVersion;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashPrevBlock;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashMerkleRoot;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nTime;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBits;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nNonce;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>block;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned char pchPadding0[64];<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hash1;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned char pchPadding1[64];<br/>+<span style=\"white-space: pre;\"> </span>};<br/>+<span style=\"white-space: pre;\"> </span>char tmpbuf[sizeof(tmpworkspace)+16];<br/>+<span style=\"white-space: pre;\"> </span>tmpworkspace&amp; tmp = *(tmpworkspace*)alignup&lt;16&gt;(tmpbuf);<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span>char line[180];<br/>+<span style=\"white-space: pre;\"> </span>ifstream fin(filename);<br/>+<span style=\"white-space: pre;\"> </span>char *p;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int totalhashes= 0;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int found = 0;<br/>+<span style=\"white-space: pre;\"> </span>clock_t start, end;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int cpu_time_used;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int tnonce;<br/>+<span style=\"white-space: pre;\"> </span>start = clock();<br/>+<br/>+<span style=\"white-space: pre;\"> </span>while( fin.getline(line, 180)) <br/>+<span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>string in(line);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//printf(\"%s\\n\", in.c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nVersion\u00a0 \u00a0 \u00a0 \u00a0= strtol(in.substr(0,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.hashPrevBlock.SetHex(in.substr(8,64));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.hashMerkleRoot.SetHex(in.substr(64+8,64));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nTime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = strtol(in.substr(128+8,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nBits\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = strtol(in.substr(128+16,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tnonce = strtol(in.substr(128+24,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= tnonce;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBlocks0 = FormatHashBlocks(&amp;tmp.block, sizeof(tmp.block));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBlocks1 = FormatHashBlocks(&amp;tmp.hash1, sizeof(tmp.hash1));<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>// Byte swap all the input buffer<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for (int i = 0; i &lt; sizeof(tmp)/4; i++) <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>((unsigned int*)&amp;tmp)[i] = ByteReverse(((unsigned int*)&amp;tmp)[i]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>// Precalc the first half of the first hash, which stays constant<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 midstatebuf[2];<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256&amp; midstate = *alignup&lt;16&gt;(midstatebuf);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;midstate, &amp;tmp.block, pSHA256InitState);<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashTarget = CBigNum().SetCompact(ByteReverse(tmp.block.nBits)).getuint256();<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span>printf(\"target %s\\n\", hashTarget.GetHex().c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hash;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashbuf[2];<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256&amp; refhash = *alignup&lt;16&gt;(hashbuf);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int thash[8][NPAR];<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>int done = 0;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int i, j;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* reference */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;tmp.hash1, (char*)&amp;tmp.block + 64, &amp;midstate);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;refhash, &amp;tmp.hash1, pSHA256InitState);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for (int i = 0; i &lt; sizeof(refhash)/4; i++)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>((unsigned int*)&amp;refhash)[i] = ByteReverse(((unsigned int*)&amp;refhash)[i]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//printf(\"reference nonce %08x:\\n%s\\n\\n\", tnonce, refhash.GetHex().c_str());<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce = ByteReverse(tnonce) &amp; 0xfffff000;<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(;;)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>Double_BlockSHA256((char*)&amp;tmp.block + 64, &amp;tmp.hash1, &amp;midstate, thash, pSHA256InitState);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(i = 0; i&lt;NPAR; i++) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* fast hash checking */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(thash[7][i] == 0) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"found something... \");<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(j = 0; j&lt;8; j++) ((unsigned int *)&amp;hash)[j] = ByteReverse((unsigned int)thash[j][i]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span>printf(\"%s\\n\", hash.GetHex().c_str());<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if (hash &lt;= hashTarget)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>found++;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(tnonce == ByteReverse(tmp.block.nNonce + i) ) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(hash == refhash) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"\\r%lu\", found);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>totalhashes += NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>done = 1;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>} else {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"Hashes do not match!\\n\");<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>} else {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"nonce does not match. %08x != %08x\\n\", tnonce, ByteReverse(tmp.block.nNonce + i));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>break;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(done) break;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce+=NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>totalhashes += NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(tmp.block.nNonce == 0) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"ERROR: Hash not found for:\\n%s\\n\", in.c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>return;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span>printf(\"\\n\");<br/>+<span style=\"white-space: pre;\"> </span>end = clock();<br/>+<span style=\"white-space: pre;\"> </span>cpu_time_used += (unsigned int)(end - start);<br/>+<span style=\"white-space: pre;\"> </span>cpu_time_used /= ((CLOCKS_PER_SEC)/1000);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"found solutions = %lu\\n\", found);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"total hashes = %lu\\n\", totalhashes);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"total time = %lu ms\\n\", cpu_time_used);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"average speed: %lu khash/s\\n\", (totalhashes)/cpu_time_used);<br/>+}<br/>+<br/>+int main(int argc, char* argv[]) {<br/>+<span style=\"white-space: pre;\"> </span>if(argc == 2) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>BitcoinTester(argv[1]);<br/>+<span style=\"white-space: pre;\"> </span>} else <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"Missing filename!\\n\");<br/>+<span style=\"white-space: pre;\"> </span>return 0;<br/>+}<br/></div></div>",
        "post_num": 12,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6841#msg6841",
        "date": "July 31, 2010, 07:17:17 PM",
        "content": "<div class=\"post\">Had to manually patch, as I'm not using git for bitcoin and 'patch' doesn't munch this format, I guess. Anyway, got almost double speed on the OSX side, (i5 2.4, now ~2400 from ~1400), but my linux on Q6600 quad 2.4Ghz was pumping ~2500 with 0.3.6 (from source) and now, with the patch it's... ~2400. Need I tweak anything to take advantage on this?</div>",
        "post_num": 13,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6850#msg6850",
        "date": "July 31, 2010, 08:34:06 PM",
        "content": "<div class=\"post\">ahm, let me correct myself: on the quad core linux, I went from ~4400 with svn trunk @ 119 to ~2400 with the patch... not exactly what I hoped for after the success in OSX.</div>",
        "post_num": 14,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "aceat64",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=430",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6853#msg6853",
        "date": "July 31, 2010, 08:57:49 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6850#msg6850\">Quote from: nelisky on July 31, 2010, 08:34:06 PM</a></div><div class=\"quote\">ahm, let me correct myself: on the quad core linux, I went from ~4400 with svn trunk @ 119 to ~2400 with the patch... not exactly what I hoped for after the success in OSX.<br/></div><br/>I noticed the same, I went from about 4300 to 2100 when I tested it on Linux.</div>",
        "post_num": 15,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6861#msg6861",
        "date": "July 31, 2010, 10:38:29 PM",
        "content": "<div class=\"post\">What CPUs are you running it on? Could you send me sha256.o (compiled object of the algorithm)?</div>",
        "post_num": 16,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6866#msg6866",
        "date": "July 31, 2010, 11:18:07 PM",
        "content": "<div class=\"post\">I'm running on the Intel Q6600 2.4Ghz, how shall I get the file to you?</div>",
        "post_num": 17,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Mionione",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=334",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6867#msg6867",
        "date": "July 31, 2010, 11:30:11 PM",
        "content": "<div class=\"post\">care with __attribute__ ((aligned (16))) , it doesn't work with local variable, gcc doesn't align the stack</div>",
        "post_num": 18,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6868#msg6868",
        "date": "July 31, 2010, 11:37:02 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6866#msg6866\">Quote from: nelisky on July 31, 2010, 11:18:07 PM</a></div><div class=\"quote\">I'm running on the Intel Q6600 2.4Ghz, how shall I get the file to you?<br/></div>yes. i will look at the assembler code. maybe the compiler did something \"wrong\".</div>",
        "post_num": 19,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6869#msg6869",
        "date": "August 01, 2010, 12:00:10 AM",
        "content": "<div class=\"post\">Patch against SVN. Maybe it'll work now...<br/><div class=\"codeheader\">Code:</div><div class=\"code\">diff --git a/cryptopp/sha256.cpp b/cryptopp/sha256.cpp<br/>new file mode 100644<br/>index 0000000..6735678<br/>--- /dev/null<br/>+++ b/cryptopp/sha256.cpp<br/>@@ -0,0 +1,447 @@<br/>+#include &lt;string.h&gt;<br/>+#include &lt;assert.h&gt;<br/>+<br/>+#include &lt;xmmintrin.h&gt;<br/>+#include &lt;stdint.h&gt;<br/>+#include &lt;stdio.h&gt;<br/>+<br/>+#define NPAR 32<br/>+<br/>+static const unsigned int sha256_consts[] = {<br/>+<span style=\"white-space: pre;\"> </span>0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, /*\u00a0 0 */<br/>+<span style=\"white-space: pre;\"> </span>0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,<br/>+<span style=\"white-space: pre;\"> </span>0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, /*\u00a0 8 */<br/>+<span style=\"white-space: pre;\"> </span>0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,<br/>+<span style=\"white-space: pre;\"> </span>0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, /* 16 */<br/>+<span style=\"white-space: pre;\"> </span>0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,<br/>+<span style=\"white-space: pre;\"> </span>0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, /* 24 */<br/>+<span style=\"white-space: pre;\"> </span>0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,<br/>+<span style=\"white-space: pre;\"> </span>0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, /* 32 */<br/>+<span style=\"white-space: pre;\"> </span>0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,<br/>+<span style=\"white-space: pre;\"> </span>0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, /* 40 */<br/>+<span style=\"white-space: pre;\"> </span>0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,<br/>+<span style=\"white-space: pre;\"> </span>0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, /* 48 */<br/>+<span style=\"white-space: pre;\"> </span>0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,<br/>+<span style=\"white-space: pre;\"> </span>0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, /* 56 */<br/>+<span style=\"white-space: pre;\"> </span>0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2<br/>+};<br/>+<br/>+<br/>+static inline __m128i Ch(const __m128i b, const __m128i c, const __m128i d) {<br/>+<span style=\"white-space: pre;\"> </span>return (b &amp; c) ^ (~b &amp; d);<br/>+}<br/>+<br/>+static inline __m128i Maj(const __m128i b, const __m128i c, const __m128i d) {<br/>+<span style=\"white-space: pre;\"> </span>return (b &amp; c) ^ (b &amp; d) ^ (c &amp; d);<br/>+}<br/>+<br/>+static inline __m128i ROTR(__m128i x, const int n) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_srli_epi32(x, n) | _mm_slli_epi32(x, 32 - n);<br/>+}<br/>+<br/>+static inline __m128i SHR(__m128i x, const int n) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_srli_epi32(x, n);<br/>+}<br/>+<br/>+/* SHA256 Functions */<br/>+#define<span style=\"white-space: pre;\"> </span>BIGSIGMA0_256(x)<span style=\"white-space: pre;\"> </span>(ROTR((x), 2) ^ ROTR((x), 13) ^ ROTR((x), 22))<br/>+#define<span style=\"white-space: pre;\"> </span>BIGSIGMA1_256(x)<span style=\"white-space: pre;\"> </span>(ROTR((x), 6) ^ ROTR((x), 11) ^ ROTR((x), 25))<br/>+#define<span style=\"white-space: pre;\"> </span>SIGMA0_256(x)<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>(ROTR((x), 7) ^ ROTR((x), 18) ^ SHR((x), 3))<br/>+#define<span style=\"white-space: pre;\"> </span>SIGMA1_256(x)<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>(ROTR((x), 17) ^ ROTR((x), 19) ^ SHR((x), 10))<br/>+<br/>+static inline __m128i load_epi32(const unsigned int x0, const unsigned int x1, const unsigned int x2, const unsigned int x3) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_set_epi32(x0, x1, x2, x3);<br/>+}<br/>+<br/>+static inline unsigned int store32(const __m128i x, int i) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x;<br/>+<span style=\"white-space: pre;\"> </span>return box.ret[i];<br/>+}<br/>+<br/>+static inline void store_epi32(const __m128i x, unsigned int *x0, unsigned int *x1, unsigned int *x2, unsigned int *x3) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x;<br/>+<span style=\"white-space: pre;\"> </span>*x0 = box.ret[3]; *x1 = box.ret[2]; *x2 = box.ret[1]; *x3 = box.ret[0];<br/>+}<br/>+<br/>+static inline __m128i SHA256_CONST(const int i) {<br/>+<span style=\"white-space: pre;\"> </span>return _mm_set1_epi32(sha256_consts[i]);<br/>+}<br/>+<br/>+#define add4(x0, x1, x2, x3) _mm_add_epi32(_mm_add_epi32(_mm_add_epi32(x0, x1), x2), x3)<br/>+#define add5(x0, x1, x2, x3, x4) _mm_add_epi32(add4(x0, x1, x2, x3), x4)<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+d = _mm_add_epi32(d, T1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+h = _mm_add_epi32(T1, T2);<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND_lastd(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+d = _mm_add_epi32(d, T1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>+//T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<br/>+//h = _mm_add_epi32(T1, T2);<br/>+<br/>+#define<span style=\"white-space: pre;\"> </span>SHA256ROUND_last(a, b, c, d, e, f, g, h, i, w)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+<span style=\"white-space: pre;\"> </span>T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), SHA256_CONST(i), w);<span style=\"white-space: pre;\"> </span>\\<br/>+T2 = _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\<br/>+h = _mm_add_epi32(T1, T2);<br/>+<br/>+static inline unsigned int swap(unsigned int value) {<br/>+<span style=\"white-space: pre;\"> </span>__asm__ (\"bswap %0\" : \"=r\" (value) : \"0\" (value));<br/>+<span style=\"white-space: pre;\"> </span>return value;<br/>+}<br/>+<br/>+static inline unsigned int SWAP32(const void *addr) {<br/>+<span style=\"white-space: pre;\"> </span>unsigned int value = (*((unsigned int *)(addr)));<br/>+<span style=\"white-space: pre;\"> </span>__asm__ (\"bswap %0\" : \"=r\" (value) : \"0\" (value));<br/>+<span style=\"white-space: pre;\"> </span>return value;<br/>+}<br/>+<br/>+static inline void dumpreg(__m128i x, char *msg) {<br/>+<span style=\"white-space: pre;\"> </span>union { unsigned int ret[4]; __m128i x; } box;<br/>+<span style=\"white-space: pre;\"> </span>box.x = x ;<br/>+<span style=\"white-space: pre;\"> </span>printf(\"%s %08x %08x %08x %08x\\n\", msg, box.ret[0], box.ret[1], box.ret[2], box.ret[3]);<br/>+}<br/>+<br/>+#if 1<br/>+#define dumpstate(i) printf(\"%s: %08x %08x %08x %08x %08x %08x %08x %08x %08x\\n\", \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>__func__, store32(w0, i), store32(a, i), store32(b, i), store32(c, i), store32(d, i), store32(e, i), store32(f, i), store32(g, i), store32(h, i));<br/>+#else<br/>+#define dumpstate()<br/>+#endif<br/>+void Double_BlockSHA256(const void* pin, void* pad, const void *pre, unsigned int thash[9][NPAR], const void *init)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* In = (unsigned int*)pin;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* Pad = (unsigned int*)pad;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* hPre = (unsigned int*)pre;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int* hInit = (unsigned int*)init;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int i, j, k;<br/>+<br/>+<span style=\"white-space: pre;\"> </span>/* vectors used in calculation */<br/>+<span style=\"white-space: pre;\"> </span>__m128i w0, w1, w2, w3, w4, w5, w6, w7;<br/>+<span style=\"white-space: pre;\"> </span>__m128i w8, w9, w10, w11, w12, w13, w14, w15;<br/>+<span style=\"white-space: pre;\"> </span>__m128i T1, T2;<br/>+<span style=\"white-space: pre;\"> </span>__m128i a, b, c, d, e, f, g, h;<br/>+\u00a0 __m128i nonce;<br/>+<br/>+<span style=\"white-space: pre;\"> </span>/* nonce offset for vector */<br/>+<span style=\"white-space: pre;\"> </span>__m128i offset = load_epi32(0x00000003, 0x00000002, 0x00000001, 0x00000000);<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span>for(k = 0; k&lt;NPAR; k+=4) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = load_epi32(In[0], In[0], In[0], In[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = load_epi32(In[1], In[1], In[1], In[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = load_epi32(In[2], In[2], In[2], In[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//w3 = load_epi32(In[3], In[3], In[3], In[3]); nonce will be later hacked into the hash<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = load_epi32(In[4], In[4], In[4], In[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = load_epi32(In[5], In[5], In[5], In[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = load_epi32(In[6], In[6], In[6], In[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = load_epi32(In[7], In[7], In[7], In[7]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32(In[8], In[8], In[8], In[8]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = load_epi32(In[9], In[9], In[9], In[9]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = load_epi32(In[10], In[10], In[10], In[10]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = load_epi32(In[11], In[11], In[11], In[11]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = load_epi32(In[12], In[12], In[12], In[12]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = load_epi32(In[13], In[13], In[13], In[13]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = load_epi32(In[14], In[14], In[14], In[14]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = load_epi32(In[15], In[15], In[15], In[15]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* hack nonce into lowest byte of w3 */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>nonce = load_epi32(In[3], In[3], In[3], In[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>__m128i k_vec = load_epi32(k, k, k, k);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>nonce = _mm_add_epi32(nonce, offset);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>nonce = _mm_add_epi32(nonce, k_vec);<br/>+\u00a0 \u00a0 w3 = nonce;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>a = load_epi32(hPre[0], hPre[0], hPre[0], hPre[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>b = load_epi32(hPre[1], hPre[1], hPre[1], hPre[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>c = load_epi32(hPre[2], hPre[2], hPre[2], hPre[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>d = load_epi32(hPre[3], hPre[3], hPre[3], hPre[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>e = load_epi32(hPre[4], hPre[4], hPre[4], hPre[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>f = load_epi32(hPre[5], hPre[5], hPre[5], hPre[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>g = load_epi32(hPre[6], hPre[6], hPre[6], hPre[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>h = load_epi32(hPre[7], hPre[7], hPre[7], hPre[7]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\u00a0 \u00a0 <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);<br/>+<br/>+#define store_load(x, i, dest) \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32((hPre)[i], (hPre)[i], (hPre)[i], (hPre)[i]); \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>dest = _mm_add_epi32(w8, x);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(a, 0, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(b, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(c, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(d, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(e, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(f, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(g, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_load(h, 7, w7);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = load_epi32(Pad[8], Pad[8], Pad[8], Pad[8]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = load_epi32(Pad[9], Pad[9], Pad[9], Pad[9]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = load_epi32(Pad[10], Pad[10], Pad[10], Pad[10]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = load_epi32(Pad[11], Pad[11], Pad[11], Pad[11]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = load_epi32(Pad[12], Pad[12], Pad[12], Pad[12]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = load_epi32(Pad[13], Pad[13], Pad[13], Pad[13]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = load_epi32(Pad[14], Pad[14], Pad[14], Pad[14]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = load_epi32(Pad[15], Pad[15], Pad[15], Pad[15]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>a = load_epi32(hInit[0], hInit[0], hInit[0], hInit[0]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>b = load_epi32(hInit[1], hInit[1], hInit[1], hInit[1]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>c = load_epi32(hInit[2], hInit[2], hInit[2], hInit[2]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>d = load_epi32(hInit[3], hInit[3], hInit[3], hInit[3]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>e = load_epi32(hInit[4], hInit[4], hInit[4], hInit[4]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>f = load_epi32(hInit[5], hInit[5], hInit[5], hInit[5]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>g = load_epi32(hInit[6], hInit[6], hInit[6], hInit[6]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>h = load_epi32(hInit[7], hInit[7], hInit[7], hInit[7]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\u00a0 \u00a0 <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* store resulsts directly in thash */<br/>+#define store_2(x,i)\u00a0 \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>w0 = load_epi32((hInit)[i], (hInit)[i], (hInit)[i], (hInit)[i]); \\<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>*(__m128i *)&amp;(thash)[i][0+k] = _mm_add_epi32(w0, x); <br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(a, 0);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(b, 1);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(c, 2);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(d, 3);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(e, 4);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(f, 5);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(g, 6);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>store_2(h, 7);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>*(__m128i *)&amp;(thash)[8][0+k] = nonce;<br/>+<span style=\"white-space: pre;\"> </span>}<br/>+<br/>+}<br/>diff --git a/main.cpp b/main.cpp<br/>index 0239915..50db1a3 100644<br/>--- a/main.cpp<br/>+++ b/main.cpp<br/>@@ -2555,8 +2555,10 @@ inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)<br/>\u00a0 \u00a0 \u00a0CryptoPP::SHA256::Transform((CryptoPP::word32*)pstate, (CryptoPP::word32*)pinput);<br/>\u00a0}<br/>\u00a0<br/>+// !!!! NPAR must match NPAR in cryptopp/sha256.cpp !!!!<br/>+#define NPAR 32<br/>\u00a0<br/>-<br/>+extern void Double_BlockSHA256(const void* pin, void* pout, const void *pinit, unsigned int hash[9][NPAR], const void *init2);<br/>\u00a0<br/>\u00a0<br/>\u00a0void BitcoinMiner()<br/>@@ -2701,108 +2703,128 @@ void BitcoinMiner()<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256 hashTarget = CBigNum().SetCompact(pblock-&gt;nBits).getuint256();<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256 hashbuf[2];<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0uint256&amp; hash = *alignup&lt;16&gt;(hashbuf);<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 // Cache for NPAR hashes<br/>+\u00a0 \u00a0 \u00a0 \u00a0 unsigned int thash[9][NPAR] __attribute__ ((aligned (16)));<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 unsigned int j;<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0loop<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SHA256Transform(&amp;tmp.hash1, (char*)&amp;tmp.block + 64, &amp;midstate);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SHA256Transform(&amp;hash, &amp;tmp.hash1, pSHA256InitState);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Double_BlockSHA256((char*)&amp;tmp.block + 64, &amp;tmp.hash1, &amp;midstate, thash, pSHA256InitState);<br/>\u00a0<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (((unsigned short*)&amp;hash)[14] == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for(j = 0; j&lt;NPAR; j++) {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (thash[7][j] == 0)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Byte swap the result after preliminary check<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; sizeof(hash)/4; i++)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((unsigned int*)&amp;hash)[i] = ByteReverse(((unsigned int*)&amp;hash)[i]);<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (hash &lt;= hashTarget)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Byte swap the result after preliminary check<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; sizeof(hash)/4; i++)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ((unsigned int*)&amp;hash)[i] = ByteReverse((unsigned int)thash[i][j]);<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (hash &lt;= hashTarget)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Double_BlocSHA256 might only calculate parts of the hash.<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // We'll insert the nonce and get the real hash.<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //pblock-&gt;nNonce = ByteReverse(tmp.block.nNonce + j);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //hash = pblock-&gt;GetHash();<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /* get nonce from hash */<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nNonce = ByteReverse((unsigned int)thash[8][j]);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert(hash == pblock-&gt;GetHash());<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //// debug print<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"BitcoinMiner:\\n\");<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"proof-of-work found\u00a0 \\n\u00a0 hash: %s\u00a0 \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;print();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"generated %s\\n\", FormatMoney(pblock-&gt;vtx[0].vout[0].nValue).c_str());<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_NORMAL);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_main)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nNonce = ByteReverse(tmp.block.nNonce);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert(hash == pblock-&gt;GetHash());<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //// debug print<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"BitcoinMiner:\\n\");<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"proof-of-work found\u00a0 \\n\u00a0 hash: %s\u00a0 \\ntarget: %s\\n\", hash.GetHex().c_str(), hashTarget.GetHex().c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;print();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"generated %s\\n\", FormatMoney(pblock-&gt;vtx[0].vout[0].nValue).c_str());<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_NORMAL);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_main)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev == pindexBest)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Save key<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!AddKey(key))<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key.MakeNewKey();<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Track how many getdata requests this block gets<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_mapRequestCount)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mapRequestCount[pblock-&gt;GetHash()] = 0;<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Process this block the same as if we had received it from another node<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!ProcessBlock(NULL, pblock.release()))<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"ERROR in BitcoinMiner, ProcessBlock, block not accepted\\n\");<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev == pindexBest)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Save key<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!AddKey(key))<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key.MakeNewKey();<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Track how many getdata requests this block gets<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs_mapRequestCount)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mapRequestCount[pblock-&gt;GetHash()] = 0;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Process this block the same as if we had received it from another node<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!ProcessBlock(NULL, pblock.release()))<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"ERROR in BitcoinMiner, ProcessBlock, block not accepted\\n\");<br/>+<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SetThreadPriority(THREAD_PRIORITY_LOWEST);<br/>\u00a0<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Sleep(500);<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0break;<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SetThreadPriority(THREAD_PRIORITY_LOWEST);<br/>\u00a0<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nTime every few seconds<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const unsigned int nMask = 0xffff;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ((++tmp.block.nNonce &amp; nMask) == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Sleep(500);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nonce<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nNonce += NPAR;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Update nTime every few seconds<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const unsigned int nMask = 0xffff;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ((tmp.block.nNonce &amp; nMask) == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meter hashes/sec<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nTimerStart;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int nHashCounter;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTimerStart == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter++;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meter hashes/sec<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nTimerStart;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int nHashCounter;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTimerStart == 0)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter++;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static CCriticalSection cs;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static CCriticalSection cs;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CRITICAL_BLOCK(cs)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTimeMillis() - nTimerStart &gt; 4000)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double dHashesPerSec = 1000.0 * (nMask+1) * nHashCounter / (GetTimeMillis() - nTimerStart);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter = 0;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string strStatus = strprintf(\"\u00a0 \u00a0 %.0f khash/s\", dHashesPerSec/1000.0);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIThreadCall(bind(CalledSetStatusBar, strStatus, 0));<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nLogTime;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTime() - nLogTime &gt; 30 * 60)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nLogTime = GetTime();<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double dHashesPerSec = 1000.0 * (nMask+1) * nHashCounter / (GetTimeMillis() - nTimerStart);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nTimerStart = GetTimeMillis();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nHashCounter = 0;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string strStatus = strprintf(\"\u00a0 \u00a0 %.0f khash/s\", dHashesPerSec/1000.0);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UIThreadCall(bind(CalledSetStatusBar, strStatus, 0));<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 static int64 nLogTime;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (GetTime() - nLogTime &gt; 30 * 60)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nLogTime = GetTime();<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Check for stop or if block needs to be rebuilt<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fShutdown)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!fGenerateBitcoins)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fLimitProcessors &amp;&amp; vnThreadsRunning[3] &gt; nLimitProcessors)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (vNodes.empty())<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (tmp.block.nNonce == 0)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTransactionsUpdated != nTransactionsUpdatedLast &amp;&amp; GetTime() - nStart &gt; 60)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev != pindexBest)<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>-<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nTime = max(pindexPrev-&gt;GetMedianTimePast()+1, GetAdjustedTime());<br/>-\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nTime = ByteReverse(pblock-&gt;nTime);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Check for stop or if block needs to be rebuilt<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fShutdown)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!fGenerateBitcoins)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (fLimitProcessors &amp;&amp; vnThreadsRunning[3] &gt; nLimitProcessors)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (vNodes.empty())<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (tmp.block.nNonce == 0)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nTransactionsUpdated != nTransactionsUpdatedLast &amp;&amp; GetTime() - nStart &gt; 60)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (pindexPrev != pindexBest)<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break;<br/>+<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pblock-&gt;nTime = max(pindexPrev-&gt;GetMedianTimePast()+1, GetAdjustedTime());<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp.block.nTime = ByteReverse(pblock-&gt;nTime);<br/>+\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }<br/>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}<br/>\u00a0 \u00a0 \u00a0}<br/>\u00a0}<br/>diff --git a/makefile.unix b/makefile.unix<br/>index e965287..04dac86 100644<br/>--- a/makefile.unix<br/>+++ b/makefile.unix<br/>@@ -41,7 +41,8 @@ OBJS= \\<br/>\u00a0 \u00a0 \u00a0obj/rpc.o \\<br/>\u00a0 \u00a0 \u00a0obj/init.o \\<br/>\u00a0 \u00a0 \u00a0cryptopp/obj/sha.o \\<br/>-\u00a0 \u00a0 cryptopp/obj/cpu.o<br/>+\u00a0 \u00a0 cryptopp/obj/cpu.o \\<br/>+\u00a0 \u00a0 cryptopp/obj/sha256.o<br/>\u00a0<br/>\u00a0<br/>\u00a0all: bitcoin<br/>@@ -51,7 +52,7 @@ obj/%.o: %.cpp $(HEADERS)<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -DGUI -o $@ $&lt;<br/>\u00a0<br/>\u00a0cryptopp/obj/%.o: cryptopp/%.cpp<br/>-<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -O3 -DCRYPTOPP_DISABLE_SSE2 -o $@ $&lt;<br/>+<span style=\"white-space: pre;\"> </span>g++ -c $(CFLAGS) -frename-registers -funroll-all-loops -fomit-frame-pointer\u00a0 -march=native -msse2 -msse3\u00a0 -ffast-math -O3 -o $@ $&lt;<br/>\u00a0<br/>\u00a0bitcoin: $(OBJS) obj/ui.o obj/uibase.o<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ $(CFLAGS) -o $@ $^ $(WXLIBS) $(LIBS)<br/>@@ -63,6 +64,9 @@ obj/nogui/%.o: %.cpp $(HEADERS)<br/>\u00a0bitcoind: $(OBJS:obj/%=obj/nogui/%)<br/>\u00a0<span style=\"white-space: pre;\"> </span>g++ $(CFLAGS) -o $@ $^ $(LIBS)<br/>\u00a0<br/>+test: cryptopp/obj/sha.o cryptopp/obj/sha256.o test.cpp<br/>+<span style=\"white-space: pre;\"> </span>g++ $(CFLAGS) -o $@ $^ $(LIBS)<br/>+<br/>\u00a0<br/>\u00a0clean:<br/>\u00a0<span style=\"white-space: pre;\"> </span>-rm -f obj/*.o<br/>diff --git a/test.cpp b/test.cpp<br/>new file mode 100644<br/>index 0000000..a55e972<br/>--- /dev/null<br/>+++ b/test.cpp<br/>@@ -0,0 +1,221 @@<br/>+// Copyright (c) 2009-2010 Satoshi Nakamoto<br/>+// Distributed under the MIT/X11 software license, see the accompanying<br/>+// file license.txt or http://www.opensource.org/licenses/mit-license.php.<br/>+#include &lt;assert.h&gt;<br/>+#include &lt;openssl/ecdsa.h&gt;<br/>+#include &lt;openssl/evp.h&gt;<br/>+#include &lt;openssl/rand.h&gt;<br/>+#include &lt;openssl/sha.h&gt;<br/>+#include &lt;openssl/ripemd.h&gt;<br/>+#include &lt;db_cxx.h&gt;<br/>+#include &lt;stdio.h&gt;<br/>+#include &lt;stdlib.h&gt;<br/>+#include &lt;math.h&gt;<br/>+#include &lt;limits.h&gt;<br/>+#include &lt;float.h&gt;<br/>+#include &lt;assert.h&gt;<br/>+#include &lt;memory&gt;<br/>+#include &lt;iostream&gt;<br/>+#include &lt;sstream&gt;<br/>+#include &lt;string&gt;<br/>+#include &lt;vector&gt;<br/>+#include &lt;list&gt;<br/>+#include &lt;deque&gt;<br/>+#include &lt;map&gt;<br/>+#include &lt;set&gt;<br/>+#include &lt;algorithm&gt;<br/>+#include &lt;numeric&gt;<br/>+#include &lt;boost/foreach.hpp&gt;<br/>+#include &lt;boost/lexical_cast.hpp&gt;<br/>+#include &lt;boost/tuple/tuple.hpp&gt;<br/>+#include &lt;boost/fusion/container/vector.hpp&gt;<br/>+#include &lt;boost/tuple/tuple_comparison.hpp&gt;<br/>+#include &lt;boost/tuple/tuple_io.hpp&gt;<br/>+#include &lt;boost/array.hpp&gt;<br/>+#include &lt;boost/bind.hpp&gt;<br/>+#include &lt;boost/function.hpp&gt;<br/>+#include &lt;boost/filesystem.hpp&gt;<br/>+#include &lt;boost/filesystem/fstream.hpp&gt;<br/>+#include &lt;boost/algorithm/string.hpp&gt;<br/>+#include &lt;boost/interprocess/sync/interprocess_mutex.hpp&gt;<br/>+#include &lt;boost/interprocess/sync/interprocess_recursive_mutex.hpp&gt;<br/>+#include &lt;boost/date_time/gregorian/gregorian_types.hpp&gt;<br/>+#include &lt;boost/date_time/posix_time/posix_time_types.hpp&gt;<br/>+#include &lt;sys/resource.h&gt;<br/>+#include &lt;sys/time.h&gt;<br/>+using namespace std;<br/>+using namespace boost;<br/>+#include \"cryptopp/sha.h\"<br/>+#include \"strlcpy.h\"<br/>+#include \"serialize.h\"<br/>+#include \"uint256.h\"<br/>+#include \"bignum.h\"<br/>+<br/>+#undef printf<br/>+<br/>+int FormatHashBlocks(void* pbuffer, unsigned int len) <br/>+{<br/>+<span style=\"white-space: pre;\"> </span>unsigned char* pdata = (unsigned char*)pbuffer;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int blocks = 1 + ((len + 8) / 64); <br/>+<span style=\"white-space: pre;\"> </span>unsigned char* pend = pdata + 64 * blocks;<br/>+<span style=\"white-space: pre;\"> </span>memset(pdata + len, 0, 64 * blocks - len);<br/>+<span style=\"white-space: pre;\"> </span>pdata[len] = 0x80;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int bits = len * 8; <br/>+<span style=\"white-space: pre;\"> </span>pend[-1] = (bits &gt;&gt; 0) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-2] = (bits &gt;&gt; 8) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-3] = (bits &gt;&gt; 16) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>pend[-4] = (bits &gt;&gt; 24) &amp; 0xff;<br/>+<span style=\"white-space: pre;\"> </span>return blocks;<br/>+}<br/>+<br/>+using CryptoPP::ByteReverse;<br/>+static int detectlittleendian = 1;<br/>+<br/>+#define NPAR 32 <br/>+<br/>+extern void Double_BlockSHA256(const void* pin, void* pout, const void *pinit, unsigned int hash[9][NPAR], const void *init2);<br/>+<br/>+using CryptoPP::ByteReverse;<br/>+<br/>+static const unsigned int pSHA256InitState[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};<br/>+<br/>+inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>memcpy(pstate, pinit, 32); <br/>+<span style=\"white-space: pre;\"> </span>CryptoPP::SHA256::Transform((CryptoPP::word32*)pstate, (CryptoPP::word32*)pinput);<br/>+}<br/>+<br/>+void BitcoinTester(char *filename)<br/>+{<br/>+<span style=\"white-space: pre;\"> </span>printf(\"SHA256 test started\\n\");<br/>+<br/>+<span style=\"white-space: pre;\"> </span>struct tmpworkspace<br/>+<span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>struct unnamed2<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>int nVersion;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashPrevBlock;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashMerkleRoot;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nTime;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBits;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nNonce;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>block;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned char pchPadding0[64];<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hash1;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned char pchPadding1[64];<br/>+<span style=\"white-space: pre;\"> </span>}<br/>+\u00a0 tmp __attribute__ ((aligned (16)));<br/>+<br/>+<span style=\"white-space: pre;\"> </span>char line[180];<br/>+<span style=\"white-space: pre;\"> </span>ifstream fin(filename);<br/>+<span style=\"white-space: pre;\"> </span>char *p;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int totalhashes= 0;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int found = 0;<br/>+<span style=\"white-space: pre;\"> </span>clock_t start, end;<br/>+<span style=\"white-space: pre;\"> </span>unsigned long int cpu_time_used;<br/>+<span style=\"white-space: pre;\"> </span>unsigned int tnonce;<br/>+<span style=\"white-space: pre;\"> </span>start = clock();<br/>+<br/>+<span style=\"white-space: pre;\"> </span>while( fin.getline(line, 180)) <br/>+<span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>string in(line);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//printf(\"%s\\n\", in.c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nVersion\u00a0 \u00a0 \u00a0 \u00a0= strtol(in.substr(0,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.hashPrevBlock.SetHex(in.substr(8,64));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.hashMerkleRoot.SetHex(in.substr(64+8,64));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nTime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = strtol(in.substr(128+8,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nBits\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = strtol(in.substr(128+16,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tnonce = strtol(in.substr(128+24,8).c_str(), &amp;p, 16);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce\u00a0 \u00a0 \u00a0 \u00a0 \u00a0= tnonce;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBlocks0 = FormatHashBlocks(&amp;tmp.block, sizeof(tmp.block));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int nBlocks1 = FormatHashBlocks(&amp;tmp.hash1, sizeof(tmp.hash1));<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>// Byte swap all the input buffer<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for (int i = 0; i &lt; sizeof(tmp)/4; i++) <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>((unsigned int*)&amp;tmp)[i] = ByteReverse(((unsigned int*)&amp;tmp)[i]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>// Precalc the first half of the first hash, which stays constant<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 midstate __attribute__ ((aligned(16)));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;midstate, &amp;tmp.block, pSHA256InitState);<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hashTarget = CBigNum().SetCompact(ByteReverse(tmp.block.nBits)).getuint256();<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span>printf(\"target %s\\n\", hashTarget.GetHex().c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 hash;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>uint256 refhash __attribute__ ((aligned(16)));<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int thash[9][NPAR] __attribute__ ((aligned (16)));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>int done = 0;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>unsigned int i, j;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* reference */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;tmp.hash1, (char*)&amp;tmp.block + 64, &amp;midstate);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>SHA256Transform(&amp;refhash, &amp;tmp.hash1, pSHA256InitState);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for (int i = 0; i &lt; sizeof(refhash)/4; i++)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>((unsigned int*)&amp;refhash)[i] = ByteReverse(((unsigned int*)&amp;refhash)[i]);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//printf(\"reference nonce %08x:\\n%s\\n\\n\", tnonce, refhash.GetHex().c_str());<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce = ByteReverse(tnonce) &amp; 0xfffff000;<br/>+<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(;;)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>Double_BlockSHA256((char*)&amp;tmp.block + 64, &amp;tmp.hash1, &amp;midstate, thash, pSHA256InitState);<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(i = 0; i&lt;NPAR; i++) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>/* fast hash checking */<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(thash[7][i] == 0) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"found something... \");<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>for(j = 0; j&lt;8; j++) ((unsigned int *)&amp;hash)[j] = ByteReverse((unsigned int)thash[j][i]);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>//<span style=\"white-space: pre;\"> </span>printf(\"%s\\n\", hash.GetHex().c_str());<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if (hash &lt;= hashTarget)<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>{<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>found++;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(tnonce == ByteReverse((unsigned int)thash[8][i]) ) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(hash == refhash) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"\\r%lu\", found);<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>totalhashes += NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>done = 1;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>} else {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"Hashes do not match!\\n\");<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>} else {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"nonce does not match. %08x != %08x\\n\", tnonce, ByteReverse(tmp.block.nNonce + i));<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>break;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(done) break;<br/>+<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>tmp.block.nNonce+=NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>totalhashes += NPAR;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>if(tmp.block.nNonce == 0) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"ERROR: Hash not found for:\\n%s\\n\", in.c_str());<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>return;<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span>}<br/>+<span style=\"white-space: pre;\"> </span>printf(\"\\n\");<br/>+<span style=\"white-space: pre;\"> </span>end = clock();<br/>+<span style=\"white-space: pre;\"> </span>cpu_time_used += (unsigned int)(end - start);<br/>+<span style=\"white-space: pre;\"> </span>cpu_time_used /= ((CLOCKS_PER_SEC)/1000);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"found solutions = %lu\\n\", found);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"total hashes = %lu\\n\", totalhashes);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"total time = %lu ms\\n\", cpu_time_used);<br/>+<span style=\"white-space: pre;\"> </span>printf(\"average speed: %lu khash/s\\n\", (totalhashes)/cpu_time_used);<br/>+}<br/>+<br/>+int main(int argc, char* argv[]) {<br/>+<span style=\"white-space: pre;\"> </span>if(argc == 2) {<br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>BitcoinTester(argv[1]);<br/>+<span style=\"white-space: pre;\"> </span>} else <br/>+<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>printf(\"Missing filename!\\n\");<br/>+<span style=\"white-space: pre;\"> </span>return 0;<br/>+}<br/></div></div>",
        "post_num": 20,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "wereHamster",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=589",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6893#msg6893",
        "date": "August 01, 2010, 10:16:48 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6867#msg6867\">Quote from: Mionione on July 31, 2010, 11:30:11 PM</a></div><div class=\"quote\">care with __attribute__ ((aligned (16))) , it doesn't work with local variable, gcc doesn't align the stack<br/></div><br/>Maybe gcc doesn't align the stack, but it can (and automatically does) align variables on the stack.</div>",
        "post_num": 21,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Mionione",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=334",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6899#msg6899",
        "date": "August 01, 2010, 12:53:40 PM",
        "content": "<div class=\"post\">that's what it is supposed to do, but it doesn't always do it, issues are on gcc bugzilla<br/><br/><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43798\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43798</a><br/><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16660\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16660</a><br/><a href=\"http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40838\">http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40838</a></div>",
        "post_num": 22,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Ground Loop",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=382",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6949#msg6949",
        "date": "August 02, 2010, 12:22:43 AM",
        "content": "<div class=\"post\">No joy against SVN tip here.<br/><br/><div class=\"codeheader\">Code:</div><div class=\"code\">patching file sha256.cpp<br/>patching file main.cpp<br/>Hunk #1 FAILED at 2555.<br/>Hunk #2 FAILED at 2703.<br/>2 out of 2 hunks FAILED -- saving rejects to file main.cpp.rej<br/>patching file makefile.unix<br/>Hunk #1 FAILED at 41.<br/>Hunk #2 FAILED at 52.<br/>Hunk #3 FAILED at 64.<br/>3 out of 3 hunks FAILED -- saving rejects to file makefile.unix.rej<br/>patching file test.cpp<br/></div><br/>Trying manually now.<br/></div>",
        "post_num": 23,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Ground Loop",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=382",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6970#msg6970",
        "date": "August 02, 2010, 06:57:20 AM",
        "content": "<div class=\"post\">I got the patch knitted in, and I think I did it correctly.. wasn't complicated.<br/><br/>Regrettably, the hash rate has decreased by almost half.\u00a0 I'm down from 2071 (stock build, svn tip) to 1150 khash/sec with the patch.<br/><br/>It's an Intel Xeon 3 GHz, Linux, with these proc flags:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">flags\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc pni monitor ds_cpl cid cx16 xtpr<br/></div><br/>Has anyone seen gains?<br/><br/>Did I botch it?\u00a0 Missing CPU capabilities?\u00a0 Wrong compiler options?<br/></div>",
        "post_num": 24,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6979#msg6979",
        "date": "August 02, 2010, 08:13:11 AM",
        "content": "<div class=\"post\">I have been able to apply the patch against SVN (r121) and I tested it on 2 machines:<br/><ul style=\"margin-top: 0; margin-bottom: 0;\"><li>on an AMD Opteron 2374 HE running x86_64 linux I got a 105% improvement (!)</li><li>on an Intel Core 2 Duo T7300 running x86_64 linux it was 55% slower compared to the stock version (r121)</li></ul><br/>The strange thing is that despite the fact that I have been running it on 6 Opterons (i.e. 6x4=24 cores) for 40 hours with an average rate of 51,000 khash/s, I still haven't generated any blocks. The probability of this (no blocks, 40 hours, 51,000 khash/s and diffuculty=244.2) is 0.09% or 1/1098. Are you sure this thing works correctly and that the reported rate is correct? How do I run the included test program?</div>",
        "post_num": 25,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "knightmb",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=345",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6984#msg6984",
        "date": "August 02, 2010, 08:47:04 AM",
        "content": "<div class=\"post\">Is it a AMD only optimization perhaps?</div>",
        "post_num": 26,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6985#msg6985",
        "date": "August 02, 2010, 09:00:55 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6984#msg6984\">Quote from: knightmb on August 02, 2010, 08:47:04 AM</a></div><div class=\"quote\">Is it a AMD only optimization perhaps?<br/></div><br/>Or a 64-bit only optimization.</div>",
        "post_num": 27,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Ground Loop",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=382",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6986#msg6986",
        "date": "August 02, 2010, 09:17:07 AM",
        "content": "<div class=\"post\">With the patch above, I was unable to build the test program.\u00a0 You?</div>",
        "post_num": 28,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "petree",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=666",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6987#msg6987",
        "date": "August 02, 2010, 09:22:29 AM",
        "content": "<div class=\"post\">The original patch posted is working just fine for me (Opteron 2376), and did double my performance over the stock 0.3.6 client. \u00a0I was even able to port its minor changes to 0.3.7 successfully, with the same results.<br/><br/>Is there a way we can confirm that the variables are being aligned properly? \u00a0I'm wondering if the Intel procs are less tolerant of misalignment than the AMD's.</div>",
        "post_num": 29,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6988#msg6988",
        "date": "August 02, 2010, 09:31:44 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6986#msg6986\">Quote from: Ground Loop on August 02, 2010, 09:17:07 AM</a></div><div class=\"quote\">With the patch above, I was unable to build the test program.\u00a0 You?<br/></div><br/>Under x86 I had to include cryptopp/obj/cpu.o in the list of object files, otherwise \"make test\" would fail. Under x86_64 I had no such issue.<br/><br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6987#msg6987\">Quote from: petree on August 02, 2010, 09:22:29 AM</a></div><div class=\"quote\">The original patch posted is working just fine for me (Opteron 2376), and did double my performance over the stock 0.3.6 client.\u00a0 I was even able to port its minor changes to 0.3.7 successfully, with the same results.<br/></div><br/>As I said above I did notice an imporvement in performace too, but I am not sure the patched version works correctly. Have you been able to generate any blocks with the patched version?</div>",
        "post_num": 30,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg6999#msg6999",
        "date": "August 02, 2010, 01:05:48 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6985#msg6985\">Quote from: impossible7 on August 02, 2010, 09:00:55 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6984#msg6984\">Quote from: knightmb on August 02, 2010, 08:47:04 AM</a></div><div class=\"quote\">Is it a AMD only optimization perhaps?<br/></div><br/>Or a 64-bit only optimization.<br/></div><br/>I'm trying on a Q6600 running 64bit linux (ubuntu server) and it makes things slower there, so not 64bit only. And I'm running on my mac laptop which sports an Intel i5 (also 64 bit OSX 10.6), which great speed improvement there, so not AMD only.<br/></div>",
        "post_num": 31,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "petree",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=666",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7027#msg7027",
        "date": "August 02, 2010, 04:12:33 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6988#msg6988\">Quote from: impossible7 on August 02, 2010, 09:31:44 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6986#msg6986\">Quote from: Ground Loop on August 02, 2010, 09:17:07 AM</a></div><div class=\"quote\">With the patch above, I was unable to build the test program.\u00a0 You?<br/></div><br/>Under x86 I had to include cryptopp/obj/cpu.o in the list of object files, otherwise \"make test\" would fail. Under x86_64 I had no such issue.<br/><br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6987#msg6987\">Quote from: petree on August 02, 2010, 09:22:29 AM</a></div><div class=\"quote\">The original patch posted is working just fine for me (Opteron 2376), and did double my performance over the stock 0.3.6 client.\u00a0 I was even able to port its minor changes to 0.3.7 successfully, with the same results.<br/></div><br/>As I said above I did notice an imporvement in performace too, but I am not sure the patched version works correctly. Have you been able to generate any blocks with the patched version?<br/></div><br/>Yes, since applying this patch I've generated 2 blocks.</div>",
        "post_num": 32,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7084#msg7084",
        "date": "August 02, 2010, 07:02:46 PM",
        "content": "<div class=\"post\">Is it 2x fast on AMD and 1/2 fast on Intel?<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg6797#msg6797\">Quote from: tcatm on July 31, 2010, 10:12:38 AM</a></div><div class=\"quote\">Btw. Why are you using this alignup&lt;16&gt; function when __attribute__ ((aligned (16))) will tell the compiler to align at compiletime?<br/></div>Tried that, but it doesn't work for things on the stack.\u00a0 I ran some tests.<br/><br/>It doesn't even cause an error, it just doesn't align it.</div>",
        "post_num": 33,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "jgarzik",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=541",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7086#msg7086",
        "date": "August 02, 2010, 07:15:23 PM",
        "content": "<div class=\"post\">FWIW, there exists -mstackrealign and -mpreferred-stack-boundary=NUM<br/></div>",
        "post_num": 34,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7094#msg7094",
        "date": "August 02, 2010, 08:49:25 PM",
        "content": "<div class=\"post\">After 52 hours of trying with no blocks generated, I give up and I am switching back to the vanilla bitcoin.<br/><br/>The probability of getting no blocks within 52 hours at 51,000 khash/s is 0.011%. So I conclude that the patch doesn't work and I am 99.989% confident about that. I hope that tcatm provides some explanation on how to use the supplied test program.</div>",
        "post_num": 35,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7096#msg7096",
        "date": "August 02, 2010, 09:07:56 PM",
        "content": "<div class=\"post\">To use the test program download this file (or generate it yourself from the blockchain): <a href=\"http://ul.to/hz5wlg\">http://ul.to/hz5wlg</a><br/>The program will try to find the correct nonce in each block and detect if the hash function does work correctly. It'll also benchmark the algorithm.<br/><br/>From what I've heard the patch does not work on 32 bit systems. I don't know why. I've developed it on an AMD64 machine and it works fine. If it's slower on Intel, try to disable Hyperthreading. The big loop in the SSE2 code doesn't contain any \"normal\" x86 except for one jump at the end.<br/><br/>Btw, there's a git repo at <a href=\"http://github.com/tcatm/bitcoin-cruncher/\">http://github.com/tcatm/bitcoin-cruncher/</a></div>",
        "post_num": 36,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7111#msg7111",
        "date": "August 02, 2010, 11:52:27 PM",
        "content": "<div class=\"post\">I've tried the git branch and results stay the same, almost half of what the vanilla svn can pump out. I'm running Intel and not AMD, but I am on 64bit:<br/><br/>Linux bah 2.6.32-22-server #33-Ubuntu SMP Wed Apr 28 14:34:48 UTC 2010 x86_64 GNU/Linux<br/><br/>Anything I can try to help and debug this?</div>",
        "post_num": 37,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7115#msg7115",
        "date": "August 03, 2010, 12:21:41 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg7111#msg7111\">Quote from: nelisky on August 02, 2010, 11:52:27 PM</a></div><div class=\"quote\">I've tried the git branch and results stay the same, almost half of what the vanilla svn can pump out. I'm running Intel and not AMD, but I am on 64bit:<br/><br/>Linux bah 2.6.32-22-server #33-Ubuntu SMP Wed Apr 28 14:34:48 UTC 2010 x86_64 GNU/Linux<br/><br/>Anything I can try to help and debug this?<br/></div>Can you mail me a copy of cryptopp/obj/sha256.o to <a href=\"mailto:tcatm@gawab.com\">tcatm@gawab.com</a>? I still fear Intels microcode in their CPUs wasn't made for such tight loops of SSE code. Have you run the test program? How many khash/s does it crunch?</div>",
        "post_num": 38,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7117#msg7117",
        "date": "August 03, 2010, 12:46:12 AM",
        "content": "<div class=\"post\">datla@bah:~/src/bitcoin/bitcoin-cruncher$ ./test blocks.txt <br/>SHA256 test started<br/>70293<br/>found solutions = 70293<br/>total hashes = 139463136<br/>total time = 235480 ms<br/>average speed: 592 khash/s<br/><br/>I'll send you the obj file now</div>",
        "post_num": 39,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7123#msg7123",
        "date": "August 03, 2010, 01:17:53 AM",
        "content": "<div class=\"post\">Thanks for the object!<br/><br/>There are two things I noticed:<br/>1) The Intel object runs at 3269khash/s on my AMD64 (vs. 3778khash/s) so it's less optimized than the AMD64 code.<br/><br/>2) AMD64 moves less data around and does more calculations. Sometimes it even abuses floating point instructions for integers.<br/><br/>Could you drop in my sha256.o from <a href=\"http://ul.to/2ckndx\">http://ul.to/2ckndx</a> to cryptopp/obj/, delete test (not the .cpp!!) and recompile test using make -f makefile.unix test (take care it doesn't recompile sha256.cpp to sha256.o). Then run test again. It should be using AMD64 code now. Maybe it works better...<br/><br/>If not we've found that AMD64 is about four times faster than Intel at SSE2 integer vector arithmetic. Anyone working on a floating point SHA256 implementation? <img alt=\"Wink\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/wink.gif\"/></div>",
        "post_num": 40,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7131#msg7131",
        "date": "August 03, 2010, 02:04:22 AM",
        "content": "<div class=\"post\">SHA256 test started<br/>70293<br/>found solutions = 70293<br/>total hashes = 139463136<br/>total time = 222110 ms<br/>average speed: 627 khash/s<br/><br/>So slightly better, but still far for good... As for AMD vs Intel, on my Mac, which is an intel i5, the performance boost was almost 100%, so maybe some compiler thing? I did have to remove the -arch i386 from makefile.osx to have it build on osx 10.6, but there's no such flag on linux' g++ and I'm pretty sure the 64bit g++ will not compile 32bit anyway.</div>",
        "post_num": 41,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7134#msg7134",
        "date": "August 03, 2010, 02:21:50 AM",
        "content": "<div class=\"post\">i5 is a different architecture than Core2. Maybe SSE in Core2 is broken and was fixed in i5. That means the original client is close to the fastest you can get on Core2. It's not a compiler thing. I compared the output for different architectures and -march=amdfam10 produces the fastest and smallest code. I would be surprised if a longer loop using the same instructions was faster on an older CPU.</div>",
        "post_num": 42,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7135#msg7135",
        "date": "August 03, 2010, 02:23:48 AM",
        "content": "<div class=\"post\">Well, kudos to you for trying. Now if I can just get your code merged with the old cuda version on my macbook pro, I'll be a happy camper <img alt=\"Smiley\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/smiley.gif\"/></div>",
        "post_num": 43,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "vess",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=621",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7325#msg7325",
        "date": "August 03, 2010, 08:36:04 PM",
        "content": "<div class=\"post\">Anyone able to send me a compiled version of this for windows? I'm interested to try it out on my AMD server.</div>",
        "post_num": 44,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7343#msg7343",
        "date": "August 03, 2010, 09:49:12 PM",
        "content": "<div class=\"post\">I kept running the patched version on 2 machines and the following has happened 5 times: bitcoind crashes and debug.log contains the following:<br/><br/><div class=\"codeheader\">Code:</div><div class=\"code\">proof-of-work found<br/>\u00a0\u00a0hash: 00000000001c3530e42b2c7e1a20de01436882d0c1de0b63db6be8e6194255dd<br/>target: 00000000010c5a00000000000000000000000000000000000000000000000000<br/>CBlock(hash=00000000001c3530, ver=1, hashPrevBlock=0000000000253ab5, hashMerkleRoot=89541f, nTime=1280867359, nBits=1c010c5a, nNonce=3915571979, vtx=2)<br/>\u00a0\u00a0CTransaction(hash=4fcb8e, ver=1, vin.size=1, vout.size=1, nLockTime=0)<br/>\u00a0\u00a0 \u00a0CTxIn(COutPoint(000000, -1), coinbase 045a0c011c021b04)<br/>\u00a0\u00a0 \u00a0CTxOut(nValue=50.00000000, scriptPubKey=0xCE5264238BAC29160CDC9C)<br/>\u00a0\u00a0CTransaction(hash=8f2466, ver=1, vin.size=1, vout.size=1, nLockTime=0)<br/>\u00a0\u00a0 \u00a0CTxIn(COutPoint(77aaae, 1), scriptSig=0x01F561A9044BF348CEF6F4)<br/>\u00a0\u00a0 \u00a0CTxOut(nValue=5.00000000, scriptPubKey=OP_DUP OP_HASH160 0xB13A)<br/>\u00a0\u00a0vMerkleTree: 4fcb8e 8f2466 89541f<br/>08/03/10 20:29 generated 50.00<br/>AddToWallet 4fcb8e \u00a0new<br/>AddToBlockIndex: new best=00000000001c3530 \u00a0height=72112<br/>ProcessBlock: ACCEPTED<br/>sending: inv<br/></div><br/>I guess this means that a new block has been generated. But when I restart bitcoind the balance is still zero. When I ask for a list of generated blocks I get the following:<br/><br/><div class=\"codeheader\">Code:</div><div class=\"code\">$ ./bitcoind listgenerated<br/>[<br/>\u00a0\u00a0 \u00a0{<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0\"value\" : 50.00000000000000,<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0\"maturesIn\" : -1,<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0\"accepted\" : false,<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0\"confirmations\" : 0,<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0\"genTime\" : 1280867359<br/>\u00a0\u00a0 \u00a0}<br/>]<br/></div>(listgenerated is from the patch at <a href=\"http://www.alloscomp.com/bitcoin/\">http://www.alloscomp.com/bitcoin/</a>)<br/><br/>I guess this means that my client produced a block but it crashed before it was able to broadcast it.</div>",
        "post_num": 45,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7345#msg7345",
        "date": "August 03, 2010, 09:53:54 PM",
        "content": "<div class=\"post\">did you run it on 32 bit machines? which version of the patch did you use?</div>",
        "post_num": 46,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7347#msg7347",
        "date": "August 03, 2010, 09:56:47 PM",
        "content": "<div class=\"post\">r121 from the svn patched with the patch from the post #21 running on a Opteron/x86_64</div>",
        "post_num": 47,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7348#msg7348",
        "date": "August 03, 2010, 10:00:35 PM",
        "content": "<div class=\"post\">did it crash with a segfault and can you provide a backtrace (gdb bitcoind; run; bt)?</div>",
        "post_num": 48,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7368#msg7368",
        "date": "August 03, 2010, 11:51:28 PM",
        "content": "<div class=\"post\">I did segfault according to dmesg:<br/><br/><div class=\"codeheader\">Code:</div><div class=\"code\">bitcoind[2469]: segfault at 0 ip 00007fe92c5b3f32 sp 00007fff15e5f6b0 error 4 in libc-2.11.2.so[7fe92c57e000+150000]<br/></div><br/>I don't have a stack trace.</div>",
        "post_num": 49,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7369#msg7369",
        "date": "August 04, 2010, 12:03:07 AM",
        "content": "<div class=\"post\">Did your kernel write a coredump and if so can you mail me the binary + coredump to <a href=\"mailto:tcatm@gawab.com\">tcatm@gawab.com</a>?</div>",
        "post_num": 50,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7420#msg7420",
        "date": "August 04, 2010, 02:52:17 AM",
        "content": "<div class=\"post\">I modified bitcoind so that it doen't fork to the background and now I can debug it with gdb. Next time it crashes gdb will give me a backtrace.</div>",
        "post_num": 51,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7421#msg7421",
        "date": "August 04, 2010, 03:00:49 AM",
        "content": "<div class=\"post\">GDB can also generate coredumps with the command generate-core-file. It might be useful to reconstruct the cause for the segfault. Please note, that the coredump might include your wallet so it's probably a good idea to run bitcoind on a seperate datadir.</div>",
        "post_num": 52,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "vess",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=621",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7467#msg7467",
        "date": "August 04, 2010, 01:34:44 PM",
        "content": "<div class=\"post\">Just a comment that this would be easier to test if difficulty were set to '1' in the client.</div>",
        "post_num": 53,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7470#msg7470",
        "date": "August 04, 2010, 01:43:26 PM",
        "content": "<div class=\"post\">Oh thats easy: Get two nodes on a seperate network and connect them using -connect=other_nodes_ip and a seperate/empty datadir.</div>",
        "post_num": 54,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7641#msg7641",
        "date": "August 05, 2010, 06:40:16 AM",
        "content": "<div class=\"post\">I had 5 machines running today and when I checked back 10 hours later, 4 of them had crashed, in the same way as with the previous times (i.e. right after they had generated a new block but before they broadcasted it).<br/><br/>I created a tarball containing the coredump, backtrace, binary and the sources I used to compile it including the compiled object files. You can get it from <del>here</del> (link removed). Hope that helps.<br/><br/><del>EDIT: Ok, I just noticed that both your patch and the patch for the getkhps rpc (from <a href=\"http://www.alloscomp.com/bitcoin/\">http://www.alloscomp.com/bitcoin/</a>) modify the function BitcoinMiner in main.cpp (which is where the segfault occurs) so this must be the reason for the seqfaults. I will try to test it without the getkhps patch.</del></div>",
        "post_num": 55,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7668#msg7668",
        "date": "August 05, 2010, 01:35:50 PM",
        "content": "<div class=\"post\">Ok I tried again, this time with no extra patches. I just cloned your git tree and compiled it. It still crashes. Here's the stack backtrace:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">#0 \u00a00x00007ffff710b1b5 in raise () from /lib/libc.so.6<br/>#1 \u00a00x00007ffff710c5e0 in abort () from /lib/libc.so.6<br/>#2 \u00a00x00007ffff71042d1 in __assert_fail () from /lib/libc.so.6<br/>#3 \u00a00x00000000004628de in BitcoinMiner () at main.cpp:2741<br/>#4 \u00a00x0000000000462d70 in ThreadBitcoinMiner (parg=0x391e) at main.cpp:2518<br/>#5 \u00a00x00007ffff6ec3894 in start_thread () from /lib/libpthread.so.0<br/>#6 \u00a00x00007ffff71aa07d in clone () from /lib/libc.so.6<br/></div>I have also uploaded <del>here</del> (link removed) the sources with the object files as well as the a core dump and the binary.</div>",
        "post_num": 56,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7669#msg7669",
        "date": "August 05, 2010, 02:06:14 PM",
        "content": "<div class=\"post\">That's not a real crash this time. It's an assert that fails in the miner. Most likely assert(hash == pblock-&gt;GetHash());. Can you run the test programm (explained in <a href=\"http://bitcointalk.org/index.php?topic=648.msg7096#msg7096)?\">http://bitcointalk.org/index.php?topic=648.msg7096#msg7096)?</a> If it fails, can you change -march=amdfam10 back to -march=native in makefile.unix, rm cryptopp/obj/*.o and recompile everything? What cpu are you running it on?</div>",
        "post_num": 57,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7774#msg7774",
        "date": "August 06, 2010, 02:49:32 AM",
        "content": "<div class=\"post\">The test program does not fail<br/><div class=\"codeheader\">Code:</div><div class=\"code\">$ ./test ../blocks.txt <br/>SHA256 test started<br/>70293<br/>found solutions = 70293<br/>total hashes = 139463136<br/>total time = 63250 ms<br/>average speed: 2204 khash/s<br/></div>Does the test program run on a single thread?<br/><br/>Finally, I have the same problem with both -march=amdfam10 and -march=native. The cpu is a Opteron 2374.</div>",
        "post_num": 58,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7779#msg7779",
        "date": "August 06, 2010, 03:38:53 AM",
        "content": "<div class=\"post\">Yes, test is single threaded. Is there any output on stderr? From the coredumps I can tell that there must be some output.<br/><br/>The problem seems to be hard to debug, though. Is the khash/s you get worth it anymore at 352 difficulty? I'm only getting a block once a week now. If you want to keep the block chain working, you should use the original client. If you want to gain lots of bitcoins you should use a GPU.</div>",
        "post_num": 59,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "knightmb",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=345",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7796#msg7796",
        "date": "August 06, 2010, 06:50:03 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg7779#msg7779\">Quote from: tcatm on August 06, 2010, 03:38:53 AM</a></div><div class=\"quote\">&lt;snip&gt; Is the khash/s you get worth it anymore at 352 difficulty? I'm only getting a block once a week now. If you want to keep the block chain working, you should use the original client. If you want to gain lots of bitcoins you should use a GPU.<br/></div>When the difficulty changed, the first machine in my group to generate a block was the slowest one running the stock client (800 MHz E-machine) and it hadn't generated anything in over a week itself. So I guess every little bit helps, that's so many are interested in getting this to work on their machine.</div>",
        "post_num": 60,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7814#msg7814",
        "date": "August 06, 2010, 09:00:52 AM",
        "content": "<div class=\"post\">Here's the output on stderr:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">bitcoind: main.cpp:2741: void BitcoinMiner(): Assertion `(\"break caught by CRITICAL_BLOCK!\", !fcriticalblockonce)' failed.<br/></div></div>",
        "post_num": 61,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7831#msg7831",
        "date": "August 06, 2010, 10:59:18 AM",
        "content": "<div class=\"post\">Oh, that's a part in the code my patch doesn't touch. You could try to remove line 2741 (CRITICAL_BLOCK(cs_main)).</div>",
        "post_num": 62,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7838#msg7838",
        "date": "August 06, 2010, 11:37:20 AM",
        "content": "<div class=\"post\">CRITICAL_BLOCK is a macro that contains a for loop. The assertion failure indicates that break has been called inside the body of the loop. The only break statement in this block is in line 2762. In the original source file, there is no break statement in this critical block. I think you must remove lines 2759-2762. The is nothing like that in the original main.cpp.</div>",
        "post_num": 63,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg7841#msg7841",
        "date": "August 06, 2010, 11:54:04 AM",
        "content": "<div class=\"post\">Thanks! That got probably mixed up when I patched the file with an older diff. I fixed the git: <a href=\"http://github.com/tcatm/bitcoin-cruncher\">http://github.com/tcatm/bitcoin-cruncher</a></div>",
        "post_num": 64,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8145#msg8145",
        "date": "August 07, 2010, 09:16:01 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg7838#msg7838\">Quote from: impossible7 on August 06, 2010, 11:37:20 AM</a></div><div class=\"quote\">CRITICAL_BLOCK is a macro that contains a for loop. The assertion failure indicates that break has been called inside the body of the loop. The only break statement in this block is in line 2762. In the original source file, there is no break statement in this critical block. I think you must remove lines 2759-2762. The is nothing like that in the original main.cpp.<br/></div>Sorry about that.\u00a0 CRITICAL_BLOCK isn't perfect.\u00a0 You have to be careful not to break or continue out of it.\u00a0 There's an assert that catches and warns about break.\u00a0 I can be criticized for using it, but the syntax would be so much more bloated and error prone without it.<br/><br/>Is there a chance the SSE2 code is slow on Intel because of some quirk that could be worked around?\u00a0 For instance, if something works but is slow if it's not aligned, or thrashing the cache, or one type of instruction that's really slow?\u00a0 I'm not sure how available it is, but I think Intel used to have a profiler for profiling on a per instruction level.\u00a0 I guess if tcatm doesn't have a system with the slow processor to test with, there's not much hope.\u00a0 But it would be really nice if this was working on most CPUs.</div>",
        "post_num": 65,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "impossible7",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=664",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8167#msg8167",
        "date": "August 07, 2010, 10:51:07 PM",
        "content": "<div class=\"post\">I can confirm that the patch now works just fine. I just generated my first 50 BTC with it. And since this patch doubles the speed I think it's only fair if I donated half of that to tcatm.</div>",
        "post_num": 66,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8170#msg8170",
        "date": "August 07, 2010, 10:59:55 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg8167#msg8167\">Quote from: impossible7 on August 07, 2010, 10:51:07 PM</a></div><div class=\"quote\">I can confirm that the patch now works just fine. I just generated my first 50 BTC with it. And since this patch doubles the speed I think it's only fair if I donated half of that to tcatm.<br/></div>That's nice to hear. Thanks for the donation and thanks to everyone else who donated!</div>",
        "post_num": 67,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "aceat64",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=430",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8215#msg8215",
        "date": "August 08, 2010, 06:37:13 AM",
        "content": "<div class=\"post\">I just tried again with the latest version from your github. I'm still seeing a drop in performance compared to the vanilla source.<br/><br/>My system went from ~7100 to ~4200.<br/><br/>This particular system has dual Intel Xeon Quad-Core CPUs (E5335) @ 2.00GHz.<br/></div>",
        "post_num": 68,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8229#msg8229",
        "date": "August 08, 2010, 11:52:53 AM",
        "content": "<div class=\"post\">It seems to be like this: everything before Core2 will be slower, everything starting with Core2 is faster. Can anyone test the code on an older AMD64? I know there was a change in the way SSE2 instructions are executed in recent architectures.</div>",
        "post_num": 69,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nimnul",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=600",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8875#msg8875",
        "date": "August 12, 2010, 12:18:23 PM",
        "content": "<div class=\"post\">Can we implement a speed test, so different hashing engines are tried and the fastest is chosen?</div>",
        "post_num": 70,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "nelisky",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=601",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8883#msg8883",
        "date": "August 12, 2010, 12:57:58 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg8229#msg8229\">Quote from: tcatm on August 08, 2010, 11:52:53 AM</a></div><div class=\"quote\">It seems to be like this: everything before Core2 will be slower, everything starting with Core2 is faster. Can anyone test the code on an older AMD64? I know there was a change in the way SSE2 instructions are executed in recent architectures.<br/></div><br/>My Core2Quad (Q6600) slowed down 50%, my i5 improved ~200%, thus I don't think what you state is accurate. Maybe starting at some specific Core2?</div>",
        "post_num": 71,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8929#msg8929",
        "date": "August 12, 2010, 10:07:23 PM",
        "content": "<div class=\"post\">That big of a difference in speed, by a factor of 4 or 6, feels like it's likely to be some quirky weak spot or instruction that the old chip is slow with. \u00a0Unless it's a touted feature of the i5 that they made SSE2 six times faster.<br/><br/>A quick summary:<br/>Xeon Quad \u00a0 \u00a0 \u00a0 \u00a041% slower<br/>Core 2 Duo \u00a0 \u00a0 \u00a0 \u00a055% slower<br/>Core 2 Duo\u00a0 \u00a0 \u00a0 \u00a0 same (vess)<br/>Core 2 Quad \u00a0 \u00a0 \u00a050% slower<br/>Core i5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0200% faster (nelisky)<br/>Core i5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 100% faster (vess)<br/>AMD Opteron \u00a0 \u00a0105% faster<br/><br/>aceat64:<br/>My system went from ~7100 to ~4200.<br/>This particular system has dual Intel Xeon Quad-Core CPUs (E5335) @ 2.00GHz.<br/><br/>impossible7:<br/>on an Intel Core 2 Duo T7300 running x86_64 linux it was 55% slower compared to the stock version (r121)<br/><br/>nelisky:<br/>My Core2Quad (Q6600) slowed down 50%, <br/>my i5 improved ~200%, <br/><br/>impossible7:<br/>on an AMD Opteron 2374 HE running x86_64 linux I got a 105% improvement (!)<br/></div>",
        "post_num": 72,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "vess",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=621",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8930#msg8930",
        "date": "August 12, 2010, 10:09:50 PM",
        "content": "<div class=\"post\">My core i5 doubled in speed. My Core 2 Duo is the same speed. </div>",
        "post_num": 73,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8949#msg8949",
        "date": "August 13, 2010, 12:42:47 AM",
        "content": "<div class=\"post\">Would be interesting to try it out on older AMD64. There's been a change that would explain it there:<br/><a href=\"http://developer.amd.com/documentation/articles/pages/682007171.aspx\">http://developer.amd.com/documentation/articles/pages/682007171.aspx</a><br/><br/>Maybe Intel did something similiar without announcing it?</div>",
        "post_num": 74,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "Cheater",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=569",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg8973#msg8973",
        "date": "August 13, 2010, 06:27:23 AM",
        "content": "<div class=\"post\">I'll just pitch in that Phenom and Phenom II processors doubled (roughly).<br/>No difference between the two that I can tell.<br/><br/>Sorry I dont have anything older than Phenoms available right now.<br/>Might be able to access a old X2 in a week.</div>",
        "post_num": 75,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "sgtstein",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=398",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9105#msg9105",
        "date": "August 13, 2010, 09:10:33 PM",
        "content": "<div class=\"post\">Just a question for whoever, trying to wrap up the information in this thread.<br/><br/>Does this:<br/><ul style=\"margin-top: 0; margin-bottom: 0;\"><li> 1. Work on 32-bit?</li><li> 2. Patch the SVN (r130 as of current) or Git?</li><li> 3. Compile on CentOS?</li></ul><br/>If anyone has any answers I would greatly appreciate them.</div>",
        "post_num": 76,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9109#msg9109",
        "date": "August 13, 2010, 09:27:14 PM",
        "content": "<div class=\"post\">1. Does not work on 32-bit (though that's not a problem with the algorithm).<br/>2. Patch is against older SVN. There's a git repo at <a href=\"http://github.com/tcatm/bitcoin-cruncher\">http://github.com/tcatm/bitcoin-cruncher</a><br/>3. Compiles on every 64bit Linux.<br/><br/>It's not intended as a replacement for a standard client but for a dedicated bitcoinminer box. I'm planning a pluggable bitcoinminer someday. But at current difficulty it's easier to work for bitcoins than finding faster ways for mining.</div>",
        "post_num": 77,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "NewLibertyStandard",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=26",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9121#msg9121",
        "date": "August 13, 2010, 10:27:25 PM",
        "content": "<div class=\"post\">I would really like to have this feature included in an official build\u00a0 sometimes soon along with an internal speed test to determine which algorithm to use. You can always remove the speed test later once you figure out how to determine whether it will be faster or slower without running the speed test.</div>",
        "post_num": 78,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "sgtstein",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=398",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9128#msg9128",
        "date": "August 13, 2010, 11:17:51 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg9109#msg9109\">Quote from: tcatm on August 13, 2010, 09:27:14 PM</a></div><div class=\"quote\">1. Does not work on 32-bit (though that's not a problem with the algorithm).<br/>2. Patch is against older SVN. There's a git repo at <a href=\"http://github.com/tcatm/bitcoin-cruncher\">http://github.com/tcatm/bitcoin-cruncher</a><br/>3. Compiles on every 64bit Linux.<br/><br/>It's not intended as a replacement for a standard client but for a dedicated bitcoinminer box. I'm planning a pluggable bitcoinminer someday. But at current difficulty it's easier to work for bitcoins than finding faster ways for mining.<br/></div><br/>1. Do we know why it doesn't work on 32bit? Is is it because it's using 128bits and if so, would it help if we dropped it to 64?<br/><br/>2. Thank you, I will look into implementing it on my 64bit systems.<br/>3. Excellent to hear. I'm looking forward to using it.<br/><br/>I was planning on using it on a PE2650 dual proc Xeon @3.2GHz w/HT. I would really like to get this figured out to utilize that system. I am planning one as well. At current difficulty I would agree, except when the system needs to be run anyway and latency isn't an issue.</div>",
        "post_num": 79,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9145#msg9145",
        "date": "August 14, 2010, 12:49:18 AM",
        "content": "<div class=\"post\">MinGW on Windows has trouble compiling it:<br/><br/>g++ -c -mthreads -O2 -w -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -I\"/boost\" -I\"/db/build_unix\" -I\"/openssl/include\" -I\"/wxwidgets/lib/gcc_lib/mswud\" -I\"/wxwidgets/include\" -msse2 -O3 -o obj/sha256.o sha256.cpp<br/><br/>sha256.cpp: In function `long long int __vector__ Ch(long long int __vector__, long long int __vector__, long long int __vector__)':<br/>sha256.cpp:31: internal compiler error: in perform_integral_promotions, at cp/typeck.c:1454<br/>Please submit a full bug report,<br/>with preprocessed source if appropriate.<br/>See &lt;URL:http://www.mingw.org/bugs.shtml&gt; for instructions.<br/>make: *** [obj/sha256.o] Error 1<br/></div>",
        "post_num": 80,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9146#msg9146",
        "date": "August 14, 2010, 12:50:28 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg9128#msg9128\">Quote from: sgtstein on August 13, 2010, 11:17:51 PM</a></div><div class=\"quote\">1. Do we know why it doesn't work on 32bit? Is is it because it's using 128bits and if so, would it help if we dropped it to 64?<br/></div><br/>No idea, maybe some alignment problem. Someone was trying to figure it out on IRC. I don't have a SSE2 capable 32bit system. The additional registers in 64bit mode are also useful. I don't know if your PE2650 has a recent enough CPU. You might experience a performance drop of 50% if the CPU is too old.<br/><br/>Btw, did anyone with Intel CPU compare performance with Hyperthreading enabled/disabled? The SSE2 loop keeps the arithmetic units and pipelines pretty busy and I can imagine Hyperthreading might decrease performance.</div>",
        "post_num": 81,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "tcatm",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=592",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9147#msg9147",
        "date": "August 14, 2010, 12:53:07 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg9145#msg9145\">Quote from: satoshi on August 14, 2010, 12:49:18 AM</a></div><div class=\"quote\">MinGW on Windows has trouble compiling it:<br/><br/>g++ -c -mthreads -O2 -w -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -I\"/boost\" -I\"/db/build_unix\" -I\"/openssl/include\" -I\"/wxwidgets/lib/gcc_lib/mswud\" -I\"/wxwidgets/include\" -msse2 -O3 -o obj/sha256.o sha256.cpp<br/><br/>sha256.cpp: In function `long long int __vector__ Ch(long long int __vector__, long long int __vector__, long long int __vector__)':<br/>sha256.cpp:31: internal compiler error: in perform_integral_promotions, at cp/typeck.c:1454<br/>Please submit a full bug report,<br/>with preprocessed source if appropriate.<br/>See &lt;URL:http://www.mingw.org/bugs.shtml&gt; for instructions.<br/>make: *** [obj/sha256.o] Error 1<br/><br/></div><br/>Looks like we're triggering a compiler bug in the tree optimizer. Can you try to compile it -O0?</div>",
        "post_num": 82,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9159#msg9159",
        "date": "August 14, 2010, 04:22:29 AM",
        "content": "<div class=\"post\">If you haven't already, try aligning thash. \u00a0It might matter. \u00a0Couldn't hurt.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=648.msg9147#msg9147\">Quote from: tcatm on August 14, 2010, 12:53:07 AM</a></div><div class=\"quote\">Looks like we're triggering a compiler bug in the tree optimizer. Can you try to compile it -O0?<br/></div>No help from -O0, same error.<br/><br/>MinGW is GCC 3.4.5.\u00a0 Probably the problem.<br/><br/>I'll see if I can get a newer version of MinGW.<br/><br/></div>",
        "post_num": 83,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9228#msg9228",
        "date": "August 14, 2010, 05:55:37 PM",
        "content": "<div class=\"post\">Got the test working on 32-bit with MinGW GCC 4.5.\u00a0 Exactly 50% slower than stock with Core 2.<br/></div>",
        "post_num": 84,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9278#msg9278",
        "date": "August 14, 2010, 10:06:13 PM",
        "content": "<div class=\"post\">MinGW GCC 4.5.0:<br/>Crypto++ doesn't work, X86_SHA256_HashBlocks() never returns<br/>I only got 4-way working with test.cpp but not when called by BitcoinMiner<br/><br/>MinGW GCC 4.4.1:<br/>Crypto++ works<br/>4-way SIGSEGV<br/><br/>GCC is definitely not aligning __m128i. <br/><br/>Even if we align our own __m128i variables, the compiler may decide to use a __m128i behind the scenes as a temporary variable.<br/><br/>By making our __m128i variables aligned and changing these inlines to defines, I was able to get it to work on 4.4.1 with -O0 only:<br/>#define Ch(b, c, d) \u00a0((b &amp; c) ^ (~b &amp; d))<br/>#define Maj(b, c, d) \u00a0((b &amp; c) ^ (b &amp; d) ^ (c &amp; d))<br/>#define ROTR(x, n) (_mm_srli_epi32(x, n) | _mm_slli_epi32(x, 32 - n))<br/>#define SHR(x, n) \u00a0_mm_srli_epi32(x, n)<br/><br/>But that's with -O0.<br/><br/></div>",
        "post_num": 85,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "sgtstein",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=398",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9353#msg9353",
        "date": "August 15, 2010, 03:19:31 AM",
        "content": "<div class=\"post\">Well, reporting back.<br/><br/>I got it to compile by specifying -msse and -msse2 to gcc when compiling. I first was hashing about 692kh/s (50% of SVN r130[1400kh/s]) but recompiled and am now receiving about ~1120kh/s. This is currently the equivalent of using both of my CPUs without HyperThreading, though I can verify that it IS using HyperThreading. With HyperThreading turned off, I get ~1350kh/s. Pretty close to the stock build. <br/><br/>Also, does the git contain the patched and updated code?<br/><br/><div class=\"codeheader\">Code:</div><div class=\"code\">// SVN r130 Using HT.<br/>08/14/10 19:02 hashmeter \u00a0 4 CPUs \u00a0 1392 khash/s<br/>08/14/10 19:32 hashmeter \u00a0 4 CPUs \u00a0 1387 khash/s<br/>08/14/10 20:02 hashmeter \u00a0 4 CPUs \u00a0 1386 khash/s<br/>08/14/10 20:32 hashmeter \u00a0 4 CPUs \u00a0 1380 khash/s<br/>08/14/10 21:02 hashmeter \u00a0 4 CPUs \u00a0 1363 khash/s<br/>// With -msse -msse2, first run. Using HT.<br/>08/14/10 21:32 hashmeter \u00a0 4 CPUs \u00a0 \u00a0692 khash/s<br/>08/14/10 22:06 hashmeter \u00a0 4 CPUs \u00a0 1011 khash/s<br/>08/14/10 22:11 hashmeter \u00a0 4 CPUs \u00a0 1104 khash/s<br/>08/14/10 22:16 hashmeter \u00a0 4 CPUs \u00a0 1120 khash/s<br/>// NOT using HT.<br/>08/14/10 22:21 hashmeter \u00a0 2 CPUs \u00a0 1359 khash/s<br/>08/14/10 22:26 hashmeter \u00a0 2 CPUs \u00a0 1340 khash/s<br/></div><br/><br/>Just wanted to tell my story and help with whatever information I could.</div>",
        "post_num": 86,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 152,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: 4 hashes parallel on SSE2 CPUs for 0.3.6",
        "url": "https://bitcointalk.org/index.php?topic=648.msg9359#msg9359",
        "date": "August 15, 2010, 03:40:29 AM",
        "content": "<div class=\"post\">On both MinGW GCC 4.4.1 and 4.5.0 I have it working with test.cpp but SIGSEGV when called by BitcoinMiner. \u00a0So now it doesn't look like it's the version of GCC, it's something else, maybe just the luck of how the stack is aligned.<br/><br/>I have it working fine on GCC 4.3.3 on Ubuntu 32-bit.<br/><br/>I found the problem with Crypto++ on MinGW 4.5.0. \u00a0Here's the patch for that:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">--- \\old\\sha.cpp<span style=\"white-space: pre;\"> </span>Mon Jul 26 13:31:11 2010<br/>+++ \\new\\sha.cpp<span style=\"white-space: pre;\"> </span>Sat Aug 14 20:21:08 2010<br/>@@ -336,7 +336,7 @@<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(14, 0, eax, ecx, edi, edx)<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(15, 0, ecx, eax, edx, edi)<br/>\u00a0<br/>-<span style=\"white-space: pre;\"> </span>ASL(1)<br/>+ \u00a0 \u00a0ASL(label1) \u00a0 // Bitcoin: fix for MinGW GCC 4.5<br/>\u00a0<span style=\"white-space: pre;\"> </span>AS2(add WORD_REG(si), 4*16)<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(0, 1, eax, ecx, edi, edx)<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(1, 1, ecx, eax, edx, edi)<br/>@@ -355,7 +355,7 @@<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(14, 1, eax, ecx, edi, edx)<br/>\u00a0<span style=\"white-space: pre;\"> </span>ROUND(15, 1, ecx, eax, edx, edi)<br/>\u00a0<span style=\"white-space: pre;\"> </span>AS2(<span style=\"white-space: pre;\"> </span>cmp<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>WORD_REG(si), K_END)<br/>-<span style=\"white-space: pre;\"> </span>ASJ(<span style=\"white-space: pre;\"> </span>jne,<span style=\"white-space: pre;\"> </span>1, b)<br/>+ \u00a0 \u00a0ASJ( \u00a0 \u00a0jne, \u00a0 \u00a0label1, \u00a0) \u00a0 // Bitcoin: fix for MinGW GCC 4.5<br/>\u00a0<br/>\u00a0<span style=\"white-space: pre;\"> </span>AS2(<span style=\"white-space: pre;\"> </span>mov<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>WORD_REG(dx), DATA_SAVE)<br/>\u00a0<span style=\"white-space: pre;\"> </span>AS2(<span style=\"white-space: pre;\"> </span>add<span style=\"white-space: pre;\"> </span><span style=\"white-space: pre;\"> </span>WORD_REG(dx), 64)<br/></div></div>",
        "post_num": 87,
        "is_displayed": true,
        "nested_level": 0
    }
]