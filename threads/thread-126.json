[
    {
        "thread_id": 126,
        "name": "lachesis",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=237",
        "subject": "JSON-RPC Multiple Invocations",
        "url": "https://bitcointalk.org/index.php?topic=528.msg4923#msg4923",
        "date": "July 22, 2010, 02:09:49 AM",
        "content": "<div class=\"post\">I noticed from a hint that Satoshi dropped in the JSON-RPC password thread about so-called \"Multiple Invocation\" support in Bitcoin's JSON-RPC.<br/><br/>As I run a site that polls bitcoind for payments to a large number of addresses twice a minute, I was intrigued. First of all, this isn't JSON-RPC 2.0's \"Batch\" support, where requests are submitted in an array and responses are received the same way:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">request = [<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [1,2,4], \"id\": \"1\"},<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42,23], \"id\": \"2\"},<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"method\": \"get_data\", \"id\": \"9\"} <br/>\u00a0 \u00a0 ]<br/>response = [<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"result\": 7, \"id\": \"1\"},<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"result\": 19, \"id\": \"2\"},<br/>\u00a0 \u00a0 \u00a0 \u00a0 {\"jsonrpc\": \"2.0\", \"result\": [\"hello\", 5], \"id\": \"9\"}<br/>\u00a0 \u00a0 ]<br/></div><br/>Instead, it's something different, and I can't figure out how to parse the responses in Python. Here's a screen capture of a telnet session to the Bitcoin RPC server:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">$ telnet localhost 8332<br/>Trying 127.0.0.1...<br/>Connected to localhost.<br/>Escape character is '^]'.<br/>POST / HTTP/1.1<br/>Content-Type: text/plain<br/>Content-Length: 97<br/><br/>{\"params\":[],\"id\":1,\"method\":\"getconnectioncount\"}<br/>{\"params\":[],\"id\":2,\"method\":\"getdifficulty\"}<br/>HTTP/1.1 200 OK<br/>Connection: close<br/>Content-Length: 33<br/>Content-Type: application/json<br/>Date: Sat, 08 Jul 2006 12:04:08 GMT<br/>Server: json-rpc/1.0<br/><br/>{\"result\":8,\"error\":null,\"id\":1}<br/>HTTP/1.1 200 OK<br/>Connection: close<br/>Content-Length: 49<br/>Content-Type: application/json<br/>Date: Sat, 08 Jul 2006 12:04:08 GMT<br/>Server: json-rpc/1.0<br/><br/>{\"result\":181.5432893640505,\"error\":null,\"id\":2}<br/>Connection closed by foreign host.<br/></div>As you can see, the server replies with two complete HTTP 200 responses instead of (as I would have expected) one response with the two lines concatenated as I did in the request.<br/><br/>I can't figure out how to parse that with anything at all semi-automated in Python. urllib2 and httplib both return after the first response and drop the second one on the floor. <br/><br/>Has anyone encountered this problem before? Does anyone know of a Python library that can handle this strange multi-request behaviour?</div>",
        "post_num": 1,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 126,
        "name": "lachesis",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=237",
        "subject": "Re: JSON-RPC Multiple Invocations",
        "url": "https://bitcointalk.org/index.php?topic=528.msg4940#msg4940",
        "date": "July 22, 2010, 03:18:36 AM",
        "content": "<div class=\"post\">Alright, I know it hasn't been more than an hour since I last posted about this, but I decided to solve this problem myself.<br/><br/>If there's a better solution out there, I'd be glad to hear it, but here's my version 0.1 attempt to make this work:<br/><a href=\"http://www.alloscomp.com/bitcoin/btcjsonrpc.pys\">http://www.alloscomp.com/bitcoin/btcjsonrpc.pys</a><br/><br/>Let me know if you like it, hate it, or see any obvious flaws with it. There's some getting started docs in the source, but here's the code of the test suite:<br/><div class=\"codeheader\">Code:</div><div class=\"code\"> \u00a0 \u00a0from btcjsonrpc import Service<br/>\u00a0\u00a0 \u00a0s = Service()<br/>\u00a0\u00a0 \u00a0print 'preparing getbalance; id:',s.getbalance() # Each call returns its ID so you can find it later in the results<br/>\u00a0\u00a0 \u00a0print 'preparing getdifficulty; id:',s.getdifficulty() <br/>\u00a0\u00a0 \u00a0print 'preparing listreceivedbyaddress; id:',s.listreceivedbyaddress(10000) # Call with a parameter<br/>\u00a0\u00a0 \u00a0print 'preparing getbalance; id:',s.getbalance(id='getbalance 2') # You can also specify your own ID<br/>\u00a0\u00a0 \u00a0print '\\nexecuting call\\n\\nresults:'<br/>\u00a0\u00a0 \u00a0results = s() # Get the results by calling the Service object<br/>\u00a0\u00a0 \u00a0for id,value in results.iteritems():<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0print id,value<br/>\u00a0\u00a0 \u00a0# If you'd prefer to work directly with the JSON responses instead of a dict of IDs, then access the list Service.responses.<br/>\u00a0\u00a0 \u00a0print '\\njson responses'<br/>\u00a0\u00a0 \u00a0print s.responses<br/></div><br/>And here's the output, including the docstr:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">$ ./btcjsonrpc.py <br/>\u00a0Socket-based, Bitcoin-compatible JSON-RPC v1.0 client.<br/>\u00a0By: Eric Swanson (http://www.alloscomp.com/bitcoin)<br/>\u00a0Version 0.1, July 21, 2010<br/>Don't use this for one-off request-&gt;response pairs. Use something like the reference python-jsonrpc library, or urllib2 + json. This client is hackish, but it works for me (and has sped up my JSON-RPC accesses tremendously).<br/><br/>For details of WHY exactly I felt the need to redo python-jsonrpc using a raw socket, check out the follow forum post: http://bitcointalk.org/index.php?topic=528.0<br/><br/>Usage is fairly straightforward, and a code sample can be found below the library code (in the if __name__=='__main__' clause). <br/><br/>preparing getbalance; id: jss-1<br/>preparing getdifficulty; id: jss-2<br/>preparing listreceivedbyaddress; id: jss-3<br/>preparing getbalance; id: getbalance 2<br/><br/>executing call<br/><br/>results:<br/>jss-2 181.543289364<br/>jss-3 []<br/>getbalance 2 2345.94<br/>jss-1 2345.94<br/><br/>json responses<br/>[{u'id': u'jss-2', u'result': 181.54328936405051, u'error': None}, {u'id': u'jss-3', u'result': [], u'error': None}, {u'id': u'getbalance 2', u'result': 2345.9400000000001, u'error': None}, {u'id': u'jss-1', u'result': 2345.9400000000001, u'error': None}]<br/></div></div>",
        "post_num": 2,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 126,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: JSON-RPC Multiple Invocations",
        "url": "https://bitcointalk.org/index.php?topic=528.msg5416#msg5416",
        "date": "July 24, 2010, 12:59:08 AM",
        "content": "<div class=\"post\">Obviously it's a bug that it repeats the header.<br/><br/>I was trying to follow the 1.0 spec: <a href=\"http://json-rpc.org/wiki/specification\">http://json-rpc.org/wiki/specification</a>\u00a0 \u00a0It called for multiple invocation.<br/><br/>I think they mean it's like this, but I'm not sure:<br/><br/>Post:<br/>{\"method\": \"postMessage\", \"params\": [\"Hello all!\"], \"id\": 99}<br/>{\"method\": \"postMessage\", \"params\": [\"I have a question:\"], \"id\": 101}<br/><br/>Reply:<br/>{\"result\": 1, \"error\": null, \"id\": 99}<br/>{\"result\": 1, \"error\": null, \"id\": 101}<br/><br/>I can't remember where I think I saw that it's supposed to send back HTTP status 500 for an error reply.\u00a0 If it contains multiple responses and one is an error, I wonder if that makes the status 500 for the whole thing, I guess so.\u00a0 Maybe it should always return 200.\u00a0 I think someone sounded like the 500 might be causing a problem.<br/><br/>This probably gets fixed after 0.3.3.\u00a0 Until then, just use single invocation.\u00a0 I wonder if any JSON-RPC package even supports multiple invocation, probably not.<br/><br/>It would be nice if we could pin down better how multiple-invocation is supposed to work, if at all, before trying to fix it, and whether returning HTTP status 500 for error response is right.<br/><br/></div>",
        "post_num": 3,
        "is_displayed": true,
        "nested_level": 0
    }
]