[
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6547#msg6547",
        "date": "July 29, 2010, 11:29:31 PM",
        "content": "<div class=\"post\">There has been a discussion going on <a href=\"http://bitcointalk.org/index.php?topic=557.msg5789#msg5789\">elsewhere</a> about using protocol buffers for bitcoin. To summarise the advantages:<br/><br/>-&gt; Small encoding<br/>-&gt; Very fast<br/>-&gt; Implementations in loads of languages (So writing new clients become a lot simpler)<br/>-&gt; Forwards compatible (indeed, this is most of the point of protocol buffers)<br/>-&gt; Extremely simpleto use in code<br/><br/>So initially I would suggest storing the wallet file using protocol buffers, this isn't a breaking change and immediately makes the wallet file easier for other programs to parse. Eventually I would hope that bitcoin could use protocol buffers for networking.<br/><br/>Some people have been suggesting that protocol buffers might be larger than the custom written packet layout. I suspect that actually it would be *smaller* due to some of the clever encoding used in protocol buffers. To resolve this, I think a test is in order, I shall encode a wallet file/network packet using protocol buffers and compare the size the packets in the current scheme. However, I have no idea what's in a packet, what data is stored in a packet, and in what format?</div>",
        "post_num": 1,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "lachesis",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=237",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6565#msg6565",
        "date": "July 30, 2010, 01:04:06 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6547#msg6547\">Quote from: martin on July 29, 2010, 11:29:31 PM</a></div><div class=\"quote\">Some people have been suggesting that protocol buffers might be larger than the custom written packet layout. I suspect that actually it would be *smaller* due to some of the clever encoding used in protocol buffers. <br/></div>I agree that it could be smaller; not necessarily because of clever encoding, but because it would allow us to drop reserved bytes and the like.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6547#msg6547\">Quote from: martin on July 29, 2010, 11:29:31 PM</a></div><div class=\"quote\">To resolve this, I think a test is in order, I shall encode a wallet file/network packet using protocol buffers and compare the size the packets in the current scheme. However, I have no idea what's in a packet, what data is stored in a packet, and in what format?<br/></div>That would be the hard part, of course. If you want to test with the version packet (not really ideal, since it's only sent once per connection), I've decoded that fully:<br/><a href=\"http://bitcointalk.org/index.php?topic=231.msg6250#msg6250\">http://bitcointalk.org/index.php?topic=231.msg6250#msg6250</a></div>",
        "post_num": 2,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6622#msg6622",
        "date": "July 30, 2010, 07:29:55 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6565#msg6565\">Quote from: lachesis on July 30, 2010, 01:04:06 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6547#msg6547\">Quote from: martin on July 29, 2010, 11:29:31 PM</a></div><div class=\"quote\">Some people have been suggesting that protocol buffers might be larger than the custom written packet layout. I suspect that actually it would be *smaller* due to some of the clever encoding used in protocol buffers. <br/></div>I agree that it could be smaller; not necessarily because of clever encoding, but because it would allow us to drop reserved bytes and the like.<br/></div><br/>That too, although the counter argument people always make to that is that we could do away with reserved bytes anyway. No matter how impractical that would be :/<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6565#msg6565\">Quote from: lachesis on July 30, 2010, 01:04:06 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6547#msg6547\">Quote from: martin on July 29, 2010, 11:29:31 PM</a></div><div class=\"quote\">To resolve this, I think a test is in order, I shall encode a wallet file/network packet using protocol buffers and compare the size the packets in the current scheme. However, I have no idea what's in a packet, what data is stored in a packet, and in what format?<br/></div>That would be the hard part, of course. If you want to test with the version packet (not really ideal, since it's only sent once per connection), I've decoded that fully:<br/><a href=\"http://bitcointalk.org/index.php?topic=231.msg6250#msg6250\">http://bitcointalk.org/index.php?topic=231.msg6250#msg6250</a><br/></div><br/>I was hoping for a transaction packet or something, but I'll give it a go with that for now. I could also test with the wallet file if anyone has decoded that?<br/><br/>Addendum:<br/><br/>Ok, Working from this summary of the version packet layout:<br/><br/><div class=\"quoteheader\">Quote</div><div class=\"quote\">version<br/>\u00a0\u00a0 \u00a0* {0xf9,0xbe,0xb4,0xd9}<br/>\u00a0\u00a0 \u00a0* \"version\" (0x00 padded)<br/>\u00a0\u00a0 \u00a0* 4 byte message size<br/>\u00a0\u00a0 \u00a0* 4 byte checksum<br/>\u00a0\u00a0 \u00a0* 8 byte nLocalServices (always 1 if !fClient, no idea either what that means)<br/>\u00a0\u00a0 \u00a0* 8 byte timestamp (remember to use network byte order)<br/>\u00a0\u00a0 \u00a0* Remote address (the address this Node thinks he is):<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o nServices - uint64 (8b), still cryptic, don't know the meaning yet<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o pchReserved - (12b): some reserved space, apparently for later IPv6<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o ip - uint (4b)<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o port - unsigned short (2b)<br/>\u00a0\u00a0 \u00a0* Local address (the address this Node sees you under):<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o nServices - uint64 (8b), still cryptic, don't know the meaning yet<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o pchReserved - (12b): some reserved space, apparently for later IPv6<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o ip - uint (4b)<br/>\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0o port - unsigned short (2b)<br/>\u00a0\u00a0 \u00a0* 8 byte nLocalHostNonce (needed for a handshake, if I'm not mistaken)<br/>\u00a0\u00a0 \u00a0* A subversion string \".0\" in my case<br/>\u00a0\u00a0 \u00a0* nBestHeight - int (4b): appears to be the last block number</div><br/>I created this protocol buffer definition:<br/><br/><div class=\"quoteheader\">Quote</div><div class=\"quote\">message version<br/>{<br/>\u00a0\u00a0\u00a0message AddressInfo<br/>\u00a0\u00a0\u00a0{<br/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required unint64 nServices;<br/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required fixed32 ip;<br/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0required uint32 port;<br/>\u00a0\u00a0\u00a0}<br/><br/>\u00a0\u00a0\u00a0required uint32 magic = 2045;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//0xf9 | 0xbe &lt;&lt; 1 | 0xb4 &lt;&lt; 2 | 0xd9 &lt;&lt; 3<br/>\u00a0\u00a0\u00a0required uint32 version;<br/>\u00a0\u00a0\u00a0required int64 checksum;<br/>\u00a0\u00a0\u00a0required uint64 timestamp;<br/>\u00a0 \u00a0 \u00a0 \u00a0 required uint64 nLocalServices;<br/><br/>\u00a0\u00a0\u00a0required AddressInfo Remote;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//the address this node thinks he is<br/>\u00a0\u00a0\u00a0required AddressInfo Local;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//the address this node sees you under<br/><br/>\u00a0\u00a0\u00a0required fixed64 nLocalHostNonce;<br/>\u00a0\u00a0\u00a0required string SubversionString;<br/>\u00a0\u00a0\u00a0required uint32 nBestHeight;<br/>}</div><br/>Does that look correct? The only changes I've made are that the indented things in the bullet point list are nested message types, and I've completely dropped the 12 bytes of reserved ipv6 space (since that can easily be added in later, which is the point of protocol buffers). I should point out that I probbaly haven't picked the best encoding types for all these fields, that depends upon the values they're likely to store, so in practice the packet will probably be a little smaller than my tests indicate</div>",
        "post_num": 3,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6636#msg6636",
        "date": "July 30, 2010, 11:37:59 AM",
        "content": "<div class=\"post\">I used the above protocol buffer (as I said before, it's probably not optimal) and data obtained via <a href=\"http://www.alloscomp.com/bitcoin/version.pys\">http://www.alloscomp.com/bitcoin/version.pys</a> as test data.<br/><br/><div class=\"quoteheader\">Quote</div><div class=\"quote\">Version: 306<br/>nLocalServices: 1<br/>nTime: 1280487684<br/>addrYou: #.#.#.#:#### (nServices: 1)<br/>addrMe: #.#.#.#:#### (nServices: 1)<br/>nLocalHostNonce: 2359069617775922941<br/>vSubStr: \"\"<br/>nBestHeight: 71137</div><br/>The encoded protocol buffer is just 55 bytes, wheras the bitcoin version is 85 0x00 sets (each one representing 2 bytes each I assume). This means that my badly designed protocol buffer is over half the size of the hand built layout!</div>",
        "post_num": 4,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "Quantumplation",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=450",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6637#msg6637",
        "date": "July 30, 2010, 12:30:23 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6565#msg6565\">Quote from: lachesis on July 30, 2010, 01:04:06 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6547#msg6547\">Quote from: martin on July 29, 2010, 11:29:31 PM</a></div><div class=\"quote\">Some people have been suggesting that protocol buffers might be larger than the custom written packet layout. I suspect that actually it would be *smaller* due to some of the clever encoding used in protocol buffers. <br/></div>I agree that it could be smaller; not necessarily because of clever encoding, but because it would allow us to drop reserved bytes and the like.<br/></div><br/>Not only does it allow it to drop reserved fields, but it uses ZigZag encoding and some other tricks to keep integers and the like as absolutely small as possible.\u00a0 So yea, it uses clever encoding. =P\u00a0 It's also blazingly fast to process!</div>",
        "post_num": 5,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "RHorning",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=344",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6650#msg6650",
        "date": "July 30, 2010, 02:13:27 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6636#msg6636\">Quote from: martin on July 30, 2010, 11:37:59 AM</a></div><div class=\"quote\">The encoded protocol buffer is just 55 bytes, wheras the bitcoin version is 85 0x00 sets (each one representing 2 bytes each I assume). This means that my badly designed protocol buffer is half the size of the hand built layout!</div><br/>I realize that you are evangelizing for protocol buffers (and you seem to be doing a very good job of it too, I might add), but I will challenge that hand built data layouts are always bad.<br/><br/>Still, I hope this does give some food for thought and on a practical basis any improvement in the network protocol that shaves off a few bytes is always better.\u00a0 This doesn't seem to sacrifice too much in terms of the overhead either.\u00a0 More significantly, you are calling attention to an area of efficiency that needs to be addressed and is very helpful to the project.\u00a0 Thank you for doing that.\u00a0 I'm hoping to get caught up to where you are at now on this protocol business.</div>",
        "post_num": 6,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "Gavin Andresen",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=224",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6656#msg6656",
        "date": "July 30, 2010, 02:28:23 PM",
        "content": "<div class=\"post\">Speaking of the network...<br/>... is there any really robust, generic, low-latency, open source p2p network \"middleware\" out there?<br/><br/>I think using protocol buffers as the serialization format is a good idea, but I don't think just switching to protocol buffers \"buys\" enough to be worth the effort (at least not now, when transaction volume is low).<br/><br/>I'd like to see some experimenting with running bitcoin on top of a different networking layer (and use protocol buffers, too).\u00a0 Is there a p2p network that is designed to be extremely highly reliable and difficult to infiltrate or attack with malicious nodes?<br/></div>",
        "post_num": 7,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "jgarzik",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=541",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6664#msg6664",
        "date": "July 30, 2010, 03:47:33 PM",
        "content": "<div class=\"post\">FYI, it is pointless to make a packet smaller than 60 bytes -- the minimum size of an Ethernet packet.\u00a0 Packets are padded up to 60 bytes, if they are smaller.</div>",
        "post_num": 8,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6675#msg6675",
        "date": "July 30, 2010, 04:54:27 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6650#msg6650\">Quote from: RHorning on July 30, 2010, 02:13:27 PM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6636#msg6636\">Quote from: martin on July 30, 2010, 11:37:59 AM</a></div><div class=\"quote\">The encoded protocol buffer is just 55 bytes, wheras the bitcoin version is 85 0x00 sets (each one representing 2 bytes each I assume). This means that my badly designed protocol buffer is half the size of the hand built layout!</div><br/>I realize that you are evangelizing for protocol buffers (and you seem to be doing a very good job of it too, I might add), but I will challenge that hand built data layouts are always bad.<br/><br/>Still, I hope this does give some food for thought and on a practical basis any improvement in the network protocol that shaves off a few bytes is always better.\u00a0 This doesn't seem to sacrifice too much in terms of the overhead either.\u00a0 More significantly, you are calling attention to an area of efficiency that needs to be addressed and is very helpful to the project.\u00a0 Thank you for doing that.\u00a0 I'm hoping to get caught up to where you are at now on this protocol business.<br/></div><br/>They're not always bad. However, if you put in so much effort that your hand built packet was smaller than a protocol buffer then you're probably putting too much effort into a micro optimisation <img alt=\"Wink\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/wink.gif\"/><br/><br/>I'll be happy to help anyone catch up with the protocol buffers. If someone is willing to work with me I'd even work on a patch, I have very little C++ experience so I can't do it alone unfortunately.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6656#msg6656\">Quote from: gavinandresen on July 30, 2010, 02:28:23 PM</a></div><div class=\"quote\">I think using protocol buffers as the serialization format is a good idea, but I don't think just switching to protocol buffers \"buys\" enough to be worth the effort (at least not now, when transaction volume is low).</div><br/>I would disagree, protocol buffers are smaller which is nice, but it's not their main advantage - they're forwards compatible which is a hugely important thing in a p2p network, they're also something which can easily be used in many languages, which make implementing new clients in new languages easier, which in my opinion is vital for bitcoin.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6664#msg6664\">Quote from: jgarzik on July 30, 2010, 03:47:33 PM</a></div><div class=\"quote\">FYI, it is pointless to make a packet smaller than 60 bytes -- the minimum size of an Ethernet packet.\u00a0 Packets are padded up to 60 bytes, if they are smaller.<br/></div><br/>Indeed, but the version packet is probably the smallest packet of all the ones sent, so we'll gain more elsewhere. Also, keep an eye on the main point. The fact that protocol buffers are smaller is a nice aside to the fact that they're Forwards compatible and make bitcoin portable between languages.</div>",
        "post_num": 9,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "lachesis",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=237",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6811#msg6811",
        "date": "July 31, 2010, 01:45:23 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6636#msg6636\">Quote from: martin on July 30, 2010, 11:37:59 AM</a></div><div class=\"quote\">The encoded protocol buffer is just 55 bytes, wheras the bitcoin version is 85 0x00 sets (each one representing 2 bytes each I assume). This means that my badly designed protocol buffer is over half the size of the hand built layout!<br/></div>The \"0x00\" groups each represent one byte. The length of the standard version packet is 87 bytes plus 20 for the header. The header could be massively optimized as well:<br/><div class=\"codeheader\">Code:</div><div class=\"code\">message start \"magic bytes\" - 0xF9 0xBE 0xB4 0xD9<br/>command - name of command, 0 padded to 12 bytes \"version\\0\\0\\0\\0\\0\"<br/>size - 4 byte int<br/>checksum (absent for messages without data and version messages) - 4 bytes<br/></div>Obviously using proto buffers here, while absolutely a breaking change, would save a fair bit of space, especially because the \"I've created a transaction\" packet has the name \"tx\" meaning that there's at least 10 bytes of overhead in every one of those packets.</div>",
        "post_num": 10,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6816#msg6816",
        "date": "July 31, 2010, 02:11:05 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6811#msg6811\">Quote from: lachesis on July 31, 2010, 01:45:23 PM</a></div><div class=\"quote\">The \"0x00\" groups each represent one byte.</div><br/>Oops <img alt=\"Embarrassed\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/embarrassed.gif\"/><br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6811#msg6811\">Quote from: lachesis on July 31, 2010, 01:45:23 PM</a></div><div class=\"quote\">breaking change</div><br/>I think the best way to phase in protocol bufferswould to avoid breaking changes to start with, instead start with protocol buffers for the local files (like the wallet), which would gain us a little bit of size on disk, ease of reading the wallet file in other software, and get some experience using protocol buffers. Then is the time to start phasing in protocol buffers for networking in my opinion.<br/><br/>Does the current version of bitcoin have any handling for ignoring chunks of a packet? If so, phasing in protocol buffers could be as simple as writing the current packet AND writing the protocol buffer (as an ignored field for older clients), then once enough people have upgraded get rid of the old encoding.</div>",
        "post_num": 11,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "andrew",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=547",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6958#msg6958",
        "date": "August 02, 2010, 02:43:43 AM",
        "content": "<div class=\"post\">Why do you consider it a breaking change? There's no reason you couldn't first try with the new protocol and then retry using the old bitcoin serialization technique. Also I think this is a change that should be made sooner rather then later while the BitCoin community is still small. It's already been a major blocker in making new clients and delaying it is going to hamper bitcoin's adoption.</div>",
        "post_num": 12,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "martin",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=310",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg6992#msg6992",
        "date": "August 02, 2010, 11:37:33 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6958#msg6958\">Quote from: andrew on August 02, 2010, 02:43:43 AM</a></div><div class=\"quote\">Why do you consider it a breaking change? There's no reason you couldn't first try with the new protocol and then retry using the old bitcoin serialization technique.<br/></div><br/>That's a very good idea, and I would say it's the way to go with this.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=632.msg6958#msg6958\">Quote from: andrew on August 02, 2010, 02:43:43 AM</a></div><div class=\"quote\">Also I think this is a change that should be made sooner rather then later while the BitCoin community is still small. It's already been a major blocker in making new clients and delaying it is going to hamper bitcoin's adoption.<br/></div><br/>Since it's a non breaking change, it should be done as soon as possible in my opinion, for those very reasons.<br/><br/>The question remains, is anyone willing to help implement it? I'm an experience programmer but I have no C++ experience unfortunately, so I'm gonna need a little help if I try to do this myself <img alt=\"Wink\" border=\"0\" src=\"https://bitcointalk.org/Smileys/default/wink.gif\"/></div>",
        "post_num": 13,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 147,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: Protocol Buffers for Bitcoin",
        "url": "https://bitcointalk.org/index.php?topic=632.msg7090#msg7090",
        "date": "August 02, 2010, 08:22:08 PM",
        "content": "<div class=\"post\">The reason I didn't use protocol buffers or boost serialization is because they looked too complex to make absolutely airtight and secure.\u00a0 Their code is too large to read and be sure that there's no way to form an input that would do something unexpected.<br/><br/>I hate reinventing the wheel and only resorted to writing my own serialization routines reluctantly.\u00a0 The serialization format we have is as dead simple and flat as possible.\u00a0 There is no extra freedom in the way the input stream is formed.\u00a0 At each point, the next field in the data structure is expected.\u00a0 The only choices given are those that the receiver is expecting.\u00a0 There is versioning so upgrades are possible.<br/><br/>CAddress is about the only object with significant reserved space in it.\u00a0 (about 7 bytes for flags and 12 bytes for possible future IPv6 expansion)<br/><br/>The larger things we have like blocks and transactions can't be optimized much more for size.\u00a0 The bulk of their data is hashes and keys and signatures, which are uncompressible.\u00a0 The serialization overhead is very small, usually 1 byte for size fields.<br/><br/>On Gavin's idea about an existing P2P broadcast infrastructure, I doubt one exists.\u00a0 There are few P2P systems that only need broadcast.\u00a0 There are some libraries like Chord that try to provide a distributed hash table infrastructure, but that's a huge difficult problem that we don't need or want.\u00a0 Those libraries are also much harder to install than ourselves.</div>",
        "post_num": 14,
        "is_displayed": true,
        "nested_level": 0
    }
]