[
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8477#msg8477",
        "date": "August 10, 2010, 05:45:45 AM",
        "content": "<div class=\"post\">As some might have noticed, one of the things that bugs me about bitcoin is that the entire history of transactions is completely public. I totally understand the benefits of how this simplifies things and makes it easy for everyone to prove coins are valid. <br/><br/>So this is not a suggestion for a change to bitcoin. Rather it is a question about what could be possible, and what couldn't be possible.<br/><br/>The general question is, could the block list be/have been implemented in a way that didn't store the full transactions in the list? Specifically, *perhaps* it would be possible to store only hashes of the in-points, out-points in the block list. These would be time stamped (notarized) in the blocklist exactly as is being done now.<br/><br/>The major difference is that it would be the coin receiver's responsibility to store the full transaction. And perhaps he might have to store previous transactions (X) deep to show history.<br/><br/>Then when he wanted to transfer the coins to the next party, he would create a transaction exactly as is being done now, except he would have to submit the antecedents to the transaction for validation as well. For validation, each antecedent of the in-points would be hashed and validated as existing in the block list. The in-points would be hashed and identified in the blocklist as not yet spent. Then the transaction would be validated as is currently done.<br/><br/>If everything validated correctly, the additional in/out-point hashes would be added to the block. This closes the transaction's in-points, and marks the new out-point hashes as unspent.<br/><br/>Once a node completes the block (by winning the hashing contest), he then broadcasts the block of hashes and the related transactions+plus antecedents to the other nodes for confirmation and acceptance.<br/><br/>as a rough example:<br/><br/>{block-9<br/>\u00a0hash-a, hash-b, hash-c, hash-x <br/>}<br/>{block-12<br/>\u00a0hash-a, hash-y, hash-c, hash-d <br/>}<br/>{block-17<br/>\u00a0hash-b, hash-d, hash-e, hash-z, hash-f <br/>}<br/><br/>{Transaction<br/>\u00a0{in-points: hash-x, hash-y, hash-z}<br/>\u00a0{address, signature and other transactions stuff}<br/>\u00a0{out-points: hash-payed, hash-change<br/>}<br/>\u00a0<br/>{generating-block<br/>\u00a0hash-x, hash-y, hash-z, hash-payed, hash-change<br/>}<br/><br/>So basically, if the i/o-point hash existed twice in the block list, it has been spent. If it exists only once it has not been spent.<br/><br/>So in after block-17: <br/>\u00a0 a, b, c &amp; d are spent. <br/>\u00a0 e, f, x, y, z are unspent.<br/><br/>The transaction spends x, y &amp; z and creates hash-payed &amp; hash-change, so the transaction is valid.<br/><br/>After the generating-block:<br/>\u00a0 a, b, c, d, x, y, &amp; z are spent. <br/>\u00a0 e, f, payed, change are unspent.<br/><br/><br/>====<br/>The Goal: <br/><br/>The goal is to provide all the same security of the existing system, but to avoid creating a public graph of every transaction that is easily correlated. In this case, the hashes don't even have to associate in the block. The block could simply sort all hashes in ascending order.<br/><br/>In effect, I want to create real gold coins. I can give my coins to you, but everyone in the world doesn't know I did. You can give them to the next guy and prove they are pure gold coins, because you have the pedigree of the coins AND every generation in the pedigree was notarized in the public record.<br/><br/>====<br/>The Question:<br/><br/>Satoshi showed that you can remove transactions from the block list through the Merkle tree structure, without compromising security. I guess my real question is: <br/><br/>\"What is the earliest you can remove the transactions?\"<br/><br/>You could argue that nodes could remember everything anyway (the web never forgets). But if you structured the protocol so that new nodes would only receive a block list of hashes, they could only remember from this moment forward. That would give a little additional privacy. (Maybe)<br/><br/>====<br/>Any thoughts? Is there an obvious way that people could cheat and get rich?<br/><br/></div>",
        "post_num": 1,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Insti",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=336",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8504#msg8504",
        "date": "August 10, 2010, 09:34:14 AM",
        "content": "<div class=\"post\"><br/>In your system, Rather than just getting transactions from the block chain\u00a0 I just have to watch every transaction (which I'll see anyway) and log them to my secret server.<br/><br/>You're just advocating security through obscurity.<br/></div>",
        "post_num": 2,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "throughput",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=574",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8509#msg8509",
        "date": "August 10, 2010, 10:28:59 AM",
        "content": "<div class=\"post\">By the way, doesn't the idea of<br/><div class=\"quoteheader\">Quote</div><div class=\"quote\">the coin receiver's responsibility to store the full transaction. And perhaps he might have to store previous transactions (X) deep to show history.<br/></div>make the limitation on the minimal value of transaction redundant?<br/>Thus making micropayments use case more feasible.<br/></div>",
        "post_num": 3,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8533#msg8533",
        "date": "August 10, 2010, 02:09:36 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8504#msg8504\">Quote from: Insti on August 10, 2010, 09:34:14 AM</a></div><div class=\"quote\">You're just advocating security through obscurity.<br/></div><br/>I did mention that. I wouldn't count on this for monetary security. I would like the system to be equivalent to the current one.<br/><br/>However, privacy obscurity is known to add value. Your neighbors, or the FBI could me watching everything you do all day long. But they probably aren't. If you happen to become \"of interest\", sure they could start watching you now and from this time forward.<br/><br/>But the most asked for additional legal powers seems to be, \"let me examine everyone's logs!\" (phone calls, cell towers, email connections, facebook connections, credit/debit card transactions, Google history, browser history.) The other systems are \"security though authority.\" Bitcoin doesn't have that.<br/><br/>====<br/><br/>By the way, I'd rather not broadcast every transaction to every node either. But that is for another thread.<br/></div>",
        "post_num": 4,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8534#msg8534",
        "date": "August 10, 2010, 02:22:09 PM",
        "content": "<div class=\"post\">By the way, this is the way most digital notary services work. You send them a hash of a signed document and they log it permanently. Then they create a hash chain like bitcoin does. They periodically publish the current hash chain value in a newspaper or other offline redundant record.<br/><br/>You don't have to send your private documents/transaction to the notary for them to be time stamped and recorded. The notary is just certifying that something that matched this hash existed at this point in time.<br/></div>",
        "post_num": 5,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Insti",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=336",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8542#msg8542",
        "date": "August 10, 2010, 03:06:16 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8534#msg8534\">Quote from: Red on August 10, 2010, 02:22:09 PM</a></div><div class=\"quote\">By the way, this is the way most digital notary services work. You send them a hash of a signed document and they log it permanently. Then they create a hash chain like bitcoin does. They periodically publish the current hash chain value in a newspaper or other offline redundant record.<br/><br/>You don't have to send your private documents/transaction to the notary for them to be time stamped and recorded. The notary is just certifying that something that matched this hash existed at this point in time.<br/><br/></div><br/>You also don't have to prove to the notary that you have X BTC in your account to spend.<br/><br/>Although I was recently reading about <a href=\"http://en.wikipedia.org/wiki/Zero-knowledge_proof\">Zero-knowledge proofs</a> if you could use something like that to prove that your account had X BTC in it without revealing anything else it might be what you're looking for.<br/><br/>I'm just worried what you want is theoretically impossible.</div>",
        "post_num": 6,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8554#msg8554",
        "date": "August 10, 2010, 05:29:44 PM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8542#msg8542\">Quote from: Insti on August 10, 2010, 03:06:16 PM</a></div><div class=\"quote\">Although I was recently reading about <a href=\"http://en.wikipedia.org/wiki/Zero-knowledge_proof\">Zero-knowledge proofs</a> <br/></div><br/>Interesting idea to revisit! Thanks. Hadn't thought of them in a while.<br/></div>",
        "post_num": 7,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8637#msg8637",
        "date": "August 11, 2010, 12:14:22 AM",
        "content": "<div class=\"post\">This is a very interesting topic. \u00a0If a solution was found, a much better, easier, more convenient implementation of Bitcoin would be possible.<br/><br/>Originally, a coin can be just a chain of signatures. \u00a0With a timestamp service, the old ones could be dropped eventually before there's too much backtrace fan-out, or coins could be kept individually or in denominations. \u00a0It's the need to check for the absence of double-spends that requires global knowledge of all transactions.<br/><br/>The challenge is, how do you prove that no other spends exist? \u00a0It seems a node must know about all transactions to be able to verify that. \u00a0If it only knows the hash of the in/outpoints, it can't check the signatures to see if an outpoint has been spent before. \u00a0Do you have any ideas on this?<br/><br/>It's hard to think of how to apply zero-knowledge-proofs in this case.<br/><br/>We're trying to prove the absence of something, which seems to require knowing about all and checking that the something isn't included.</div>",
        "post_num": 8,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8681#msg8681",
        "date": "August 11, 2010, 04:58:50 AM",
        "content": "<div class=\"post\">Satoshi: I know you know the first part of what I'm writing, but I want others to be able to follow and for you to correct any misconceptions I might have.<br/><br/>I was looking at the current Merkle tree implementation trying to figure out when transactions could be removed without losing security. <br/><br/>In transaction graph terms, the transactions represent the nodes. The edges of the transaction graph are represented by the in-points which point to previous transactions using a BlockHash-&gt;TransHash-&gt;OutPoint kind of structure. It is the existence of an in-point that marks a previous out-point spent. <br/><br/>So for a transaction to be valid, you most show for every in-point in a transaction that BOTH, a previous out-point exists AND no previous in-point exists that references that out-point. So for every out-point, there are zero or one in-points referring to it. zero = unspent. one = spent.<br/><br/>That also means that no transaction can be culled from the block list, until both its out-points are spent. Otherwise coins will disappear. <br/>You can however, delete all double-bound transactions as soon as you are confident the 2nd binding block will stick around. (earliest possibility)<br/><br/>However, as you delete transactions and replace them with their tree hashes, you lose the graph structure present in the block list. In effect, all transactions undeleted from the block list have unspent value purely because they still exist. They can no longer prove validity by ancestry since that part of the graph was culled.<br/><br/>Which got me thinking, is there a way to prove validity if you never put the whole transactions into the graph to begin with?<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8637#msg8637\">Quote from: satoshi on August 11, 2010, 12:14:22 AM</a></div><div class=\"quote\">The challenge is, how do you prove that no other spends exist? \u00a0It seems a node must know about all transactions to be able to verify that. \u00a0If it only knows the hash of the in/outpoints, it can't check the signatures to see if an outpoint has been spent before. \u00a0Do you have any ideas on this?<br/></div><br/><br/>The key is to hash the transaction information as part of the out-point hash. So instead of creating a single transaction hash, you represent the transaction as two out-point hashes. (I originally considered an in-point/transaction/out-point structure using hashes, but that proved unnecessary.)<br/><br/>Only transaction validators need to know the bitcoin address associated with a recorded out-point hash. That comes from the submitted antecedent transaction for an in-point of the current transaction. The antecedent transaction and out-point is hashed and presumed BOTH valid and unspent if that hash appears one-and-only-one time in the block list.<br/><br/>The current transaction must be signed by the key for the address in the antecedent transactions of course. If this proves valid, two new out-point hashes are generated and inserted in the current block. The in-point hashes are marked spent by including them in the current block as well. (If a hash exists twice it is spent.) If you want to represent the transaction as a unit (and the currently visible transaction graph), the in-point hashes and out-point hashes could be grouped. However, this is not strictly necessary to prove validity.<br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8637#msg8637\">Quote from: satoshi on August 11, 2010, 12:14:22 AM</a></div><div class=\"quote\">We're trying to prove the absence of something, which seems to require knowing about all and checking that the something isn't included.<br/></div><br/>In this case we are trying to prove the presence of ONE matching hash and the absence of TWO matching hashes. It does require knowing all of them to prove.<br/><br/>I think the prohibitions against double spending are as strong as in the current version.<br/><br/><br/>==== CAUTION! ====<br/><br/>However, you have to consider the case where a node causes mischief by deliberate adding random \"canceling hashes\". In this case, the node wouldn't be able to gain access to the coins, as he has no signed transaction hashing to a valid unspent out-point hash. However, the current owner wouldn't be able to spend the coins either. The in-point would be presumed already spent.<br/><br/>That means the validation conditions are EXACTLY THE SAME as with the current implementation. All validating nodes must examine and validate all transactions represented in a block before accepting it and building on it.<br/><br/>If there exist any hashes in the proposed block that are not represented by valid transactions, the block must be rejected. <br/>That is exactly the same as the current system's, if any transaction doesn't validate, the block must be rejected.<br/><br/>I had hoped the condition to pass all transactions to all validators could be weakened but I can't see how (yet) without relying on trusted delegation.<br/><br/>----------<br/><br/>An interesting feature is that this simplifies the validation process. All that needs to be done is to parse the block list (of hashes) once. As each hash is parsed you simply look it up in a hash-set. If it doesn't exist you add it. If it does exist you delete it. When you are done parsing the block list, you will have the minimal set of valid and unspent out-points. You might even be able to keep the whole set in memory. (at least for a while!)<br/><br/><br/></div>",
        "post_num": 9,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8682#msg8682",
        "date": "August 11, 2010, 05:13:24 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8637#msg8637\">Quote from: satoshi on August 11, 2010, 12:14:22 AM</a></div><div class=\"quote\">It's hard to think of how to apply zero-knowledge-proofs in this case.<br/></div><br/>It's hard for me too! :-) Was interesting to re-read though!<br/><br/>Was hoping it would spawn some insight on a way for nodes to demonstrate that they \"always follow\" the block generating rules, in absence of everyone needing to have the set of all transactions to double check.<br/><br/>It didn't. :-)<br/></div>",
        "post_num": 10,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8798#msg8798",
        "date": "August 11, 2010, 09:07:59 PM",
        "content": "<div class=\"post\">Still thinking this idea through...<br/><br/>The only job the network needs to do is to tell whether a spend of an outpoint is the first or not.<br/><br/>If we're willing to have clients keep the history for their own money, then some of the information may not need to be stored by the network, such as:<br/>- the value<br/>- the association of inpoints and outpoints in one transaction<br/><br/>The network would track a bunch of independent outpoints.\u00a0 It doesn't know what transactions or amounts they belong to.\u00a0 A client can find out if an outpoint has been spent, and it can submit a satisfying inpoint to mark it spent.\u00a0 The network keeps the outpoint and the first valid inpoint that proves it spent.\u00a0 The inpoint signs a hash of its associated next outpoint and a salt, so it can privately be shown that the signature signs a particular next outpoint if you know the salt, but publicly the network doesn't know what the next outpoint is.<br/><br/>I believe the clients would have to keep the entire history back to the original generated coins.\u00a0 Someone sending a payment would have to send data to the recipient, as well as still communicating with the network to mark outpoints spent and check that the spend is the first spend.\u00a0 Maybe the data transfer could be done as an e-mail attachment.<br/><br/>The fact that clients have to keep the entire history reduces the privacy benefit.\u00a0 Someone handling a lot of money still gets to see a lot of transaction history.\u00a0 The way it retrospectively fans out, they might end up seeing a majority of the history.\u00a0 Denominations could be made granular to limit fan-out, but a business handling a lot of money might still end up seeing a lot of the history.<br/></div>",
        "post_num": 11,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8824#msg8824",
        "date": "August 12, 2010, 01:10:19 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8798#msg8798\">Quote from: satoshi on August 11, 2010, 09:07:59 PM</a></div><div class=\"quote\">Still thinking this idea through...<br/></div><br/>It's a bit of a brain twisting idea isn't it. :-)<br/><br/>It turns out the notion of a cancelable notarization generalizes nicely. <br/><br/>For example this system is not limited to bitcoin transactions. Since the signed contracts are kept externally, with additional validation/notarization rules, you could easily implement things like IOUs/claim checks. <br/><br/>If someone gave you $5, you could give him a $5 IOU. Its IOU hash would be notarized into the blocks list (of hashes). When you pay them back you could have them sign the IOU for confirmation. Then have the notary insert an IOU hash cancellation. Then no one could show back up with a copy of the IOU and demand double payment.<br/><br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8798#msg8798\">Quote from: satoshi on August 11, 2010, 09:07:59 PM</a></div><div class=\"quote\">I believe the clients would have to keep the entire history back to the original generated coins.\u00a0 The fact that clients have to keep the entire history reduces the privacy benefit.\u00a0 <br/></div><br/>I thought this too at first. But then I convinced myself otherwise.<br/><br/>It is really a matter of how much trust you place in the verifiers and the process of verification. People like the warm fuzzys that having every transaction available lets them trace the roots of their money back to its creation. However that is not required. <br/><br/>If you are confident in the process that validated the transactions during block creation (&gt; 50% CPU agreement). And if you are confident the previous blocks can't be changed (you proved this). Then you only need to check that related out-points have not been spent. The security features remain in the block list and procedure, even if the transactions themselves are stored externally and the predecessors are not stored at all. You showed this yourself by proving old transactions can be deleted using the Merkle tree to maintain consistency. <br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8798#msg8798\">Quote from: satoshi on August 11, 2010, 09:07:59 PM</a></div><div class=\"quote\">Someone handling a lot of money still gets to see a lot of transaction history.\u00a0 The way it retrospectively fans out, they might end up seeing a majority of the history.\u00a0 Denominations could be made granular to limit fan-out, but a business handling a lot of money might still end up seeing a lot of the history.<br/></div><br/>True, privacy is directly related to observability. If there is a central party like a money changer, he can relate a lot of out-points. But if we get away from the notion that every coin must be traced back to creation, the observation horizons will be much closer. <br/><br/>----<br/>It's really weird getting used to the notion that this coin is valid simply because the process wouldn't let it be included otherwise. But really, that is exactly how bitcoin generation works. The transaction has no inputs, but everyone decides the out-point must be valid purely because otherwise, it wouldn't be in the block at all. :-)<br/><br/></div>",
        "post_num": 12,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8836#msg8836",
        "date": "August 12, 2010, 02:46:56 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8824#msg8824\">Quote from: Red on August 12, 2010, 01:10:19 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8798#msg8798\">Quote from: satoshi on August 11, 2010, 09:07:59 PM</a></div><div class=\"quote\">I believe the clients would have to keep the entire history back to the original generated coins. \u00a0The fact that clients have to keep the entire history reduces the privacy benefit. \u00a0<br/></div><br/>I thought this too at first. But then I convinced myself otherwise.<br/></div>Are you back to talking about the existing Bitcoin system here?<br/><br/>I was talking about in the hypothetical system I was describing, if the network doesn't know the values and lineage of the transactions, then it can't verify them and vouch for them, so the clients would have to keep the history all the way back.<br/><br/>If a client wasn't present until recently, the two ways to convince it that a transaction has a valid past is:<br/>1) Show it the entire history back to the original generated coin.<br/>2) Show it a history back to a thoroughly deep block, then trust that if so many nodes all said the history up to then was correct then it must be true.<br/><br/>But if the network didn't know all the values and lineage of the transactions, it couldn't do 2), I don't think.<br/></div>",
        "post_num": 13,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "Red",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=525",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg8844#msg8844",
        "date": "August 12, 2010, 04:25:51 AM",
        "content": "<div class=\"post\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8836#msg8836\">Quote from: satoshi on August 12, 2010, 02:46:56 AM</a></div><div class=\"quote\"><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8824#msg8824\">Quote from: Red on August 12, 2010, 01:10:19 AM</a></div><div class=\"quote\">I thought this too at first. But then I convinced myself otherwise.<br/></div>Are you back to talking about the existing Bitcoin system here?<br/></div><br/>Yes, I am talking about the hypothetical system.<br/><br/>The way I proposed the system, each time a block gets generated every validating node must accept or reject that block by validating the transactions and confirming the hashes in the block. In effect, the same work that is being done with the current system, plus the out-point hash checks. Since the other validators were already competing to generate the block, they already have (at least most of) the transactions.<br/><br/>As with the current system, if the transactions don't validate (plus match included out-point hashes) the other nodes will reject the block. If the block doesn't get acceptance by at least 50% of the CPU power, it doesn't make the block list.<br/><br/>So the presence of the hashes in the block list, signifies that at least 50% of the existing validators at that time saw and validated all the containing transactions and out-point hashes. <br/><br/>Therefore (barring hash crashes) if someone submits an antecedent transaction that matches an unspent out-point, it must be valid. <br/><br/>That antecedent's antecedent must have been valid as well, otherwise the antecedent would have been rejected. And so on and so on.<br/><br/>For that not to be the case, you have to postulate that there was a period in time where blocks weren't being validated against out-point hashes. But that's plausibly implausible with the CPU competition system. <br/><br/><br/><div class=\"quoteheader\"><a href=\"https://bitcointalk.org/index.php?topic=770.msg8836#msg8836\">Quote from: satoshi on August 12, 2010, 02:46:56 AM</a></div><div class=\"quote\">If a client wasn't present until recently, the two ways to convince it that a transaction has a valid past is:<br/>1) Show it the entire history back to the original generated coin.<br/>2) Show it a history back to a thoroughly deep block, then trust that if so many nodes all said the history up to then was correct then it must be true.<br/></div><br/>If a client joined the network recently, it did so presuming that prior validators followed the rules and all pre-existing blocks are valid. (No one would join a known corrupt network)<br/><br/>Sure, in the current system, if transactions were never purged, a new node could validate all prior blocks for self consistency. But they still couldn't prove absolute truth. A bot net could have taken over and erased some transactions leaving \"a new truth\" and unhappy users. Equivalent to case 1) above.<br/><br/>In the current system, if transactions were Merkle tree purged then you have case 2) above. New comers must trust in the process. Anything missing, they don't need to worry about. Everyone must presume it was valid.<br/><br/>The unique thing I'm saying is that, if you have confidence in the bitcoin validation competition process (and we do!), then you really don't need \"a 2) thoroughly deep block\" to be very deep at all. Someone said in another thread that clients reject any changes to blocks more than two hours old. So we can have absolute confidence in all blocks buried 12 deep. <br/><br/>So if a transaction is unspent and buried 12 deep, we can purge all it's ancestors. They add warm fuzzies but no additional validation. We have to rely on them. There is simply no way to back up and change course.<br/><br/>After that, every succeeding block presumes all the preceding blocks are true. Otherwise it would be a fork and not a succeeding block. So for any transaction validated against out-points in a preceding block, if those out-points exist and are unspent, they must be presumed valid. If those are presumed valid, their ancestors must be presumed valid even if purged.<br/><br/>---<br/>In the proposed system, exactly the same things are true.<br/><br/>If an antecedent out-point hash is unspent and buried 12 blocks deep, then it is absolutely unspent. Nothing can change that fact. No point in checking its ancestors. You can finish validating the transaction, cancel the in-points hashes and create new out-point hashes.<br/><br/>Interestingly, if an antecedent out-point hash is unspent and buried LESS THAN 12 blocks deep, then it is RELATIVELY unspent. Curiously, there is still no point in checking its ancestors. The only thing that could change the antecedent's validity is a branch swap to a longer chain. If an ancestor of the antecedent you are validating this transaction against was swapped out, this transaction would be swapped out as well.<br/><br/>It's one of those cheesy time machine movie plots. Someone when back in time and spent my ancestor. Now I don't exist!<br/><br/>=====<br/><br/>So what I'm saying is that in BOTH systems (existing and proposed) the only thing validators need to do is to validate that the antecedent out-points exist and are unspent (for the current block chain). The process assures that everything else remains relatively or absolutely valid.<br/><br/>The rest is just warm fuzzies.<br/><br/>-- PS --<br/><br/>I know this is too long and redundant, but I'm to tired to edit. :-)<br/></div>",
        "post_num": 14,
        "is_displayed": true,
        "nested_level": 0
    },
    {
        "thread_id": 174,
        "name": "satoshi",
        "poster_url": "https://bitcointalk.org/index.php?action=profile;u=3",
        "subject": "Re: Not a suggestion",
        "url": "https://bitcointalk.org/index.php?topic=770.msg9074#msg9074",
        "date": "August 13, 2010, 07:28:47 PM",
        "content": "<div class=\"post\">I'm not grasping your idea yet.\u00a0 Does it hide any information from the public network?\u00a0 What is the advantage?<br/><br/>If at least 50% of nodes validated transactions enough that old transactions can be discarded, then everyone saw everything and could keep a record of it.<br/><br/>Can public nodes see the values of transactions?\u00a0 Can they see which previous transaction the value came from?\u00a0 If they can, then they know everything.\u00a0 If they can't, then they couldn't verify that the value came from a valid source, so you couldn't take their generated chain as verification of it.<br/><br/>Does it hide the bitcoin addresses?\u00a0 Is that it?\u00a0 OK, maybe now I see, if that's it.<br/><br/>Crypto may offer a way to do \"key blinding\".\u00a0 I did some research and it was obscure, but there may be something there.\u00a0 \"group signatures\" may be related.<br/><br/>There's something here in the general area:<br/><a href=\"http://www.users.zetnet.co.uk/hopwood/crypto/rh/\">http://www.users.zetnet.co.uk/hopwood/crypto/rh/</a><br/><br/>What we need is a way to generate additional blinded variations of a public key.\u00a0 The blinded variations would have the same properties as the root public key, such that the private key could generate a signature for any one of them.\u00a0 Others could not tell if a blinded key is related to the root key, or other blinded keys from the same root key.\u00a0 These are the properties of blinding.\u00a0 Blinding, in a nutshell, is x = (x * large_random_int) mod m.<br/><br/>When paying to a bitcoin address, you would generate a new blinded key for each use.<br/><br/>Then you need to be able to sign a signature such that you can't tell that two signatures came from the same private key.\u00a0 I'm not sure if always signing a different blinded public key would already give you this property.\u00a0 If not, I think that's where group signatures comes in.\u00a0 With group signatures, it is possible for something to be signed but not know who signed it.<br/><br/>As an example, say some unpopular military attack has to be ordered, but nobody wants to go down in history as the one who ordered it.\u00a0 If 10 leaders have private keys, one of them could sign the order and you wouldn't know who did it.<br/></div>",
        "post_num": 15,
        "is_displayed": true,
        "nested_level": 0
    }
]